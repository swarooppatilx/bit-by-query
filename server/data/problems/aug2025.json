[
	{
		"id": 1,
		"title": "Counting Book Authors",
		"description": "Write a query to count how many books each author has written from the `books` table.",
		"schema": "CREATE TABLE books (id INTEGER PRIMARY KEY AUTO_INCREMENT, title TEXT, author TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO books (title, author) VALUES ('AI Basics', 'Alice'), ('Data Science 101', 'Bob'), ('Advanced AI', 'Alice');",
				"expectedOutput": [
					{
						"author": "Alice",
						"count": 2
					},
					{
						"author": "Bob",
						"count": 1
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO books (title, author) VALUES ('ML Guide', 'Carol'), ('Deep Learning', 'Carol'), ('Python Basics', 'Dan'), ('Data Analysis', 'Dan'), ('Statistics', 'Dan');",
				"expectedOutput": [
					{
						"author": "Carol",
						"count": 2
					},
					{
						"author": "Dan",
						"count": 3
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO books (title, author) VALUES ('Networking', 'Eve'), ('Cyber Security', 'Eve'), ('Ethical Hacking', 'Eve');",
				"expectedOutput": [
					{
						"author": "Eve",
						"count": 3
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 2,
		"title": "Average Movie Rating",
		"description": "Write a query to find the average rating of movies from the `movies` table.",
		"schema": "CREATE TABLE movies (id INTEGER PRIMARY KEY AUTO_INCREMENT, title TEXT, rating REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO movies (title, rating) VALUES ('Inception', 9.0), ('Titanic', 8.5), ('Avatar', 8.0);",
				"expectedOutput": [
					{
						"avg_rating": 8.5
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO movies (title, rating) VALUES ('Interstellar', 9.2), ('Memento', 8.4);",
				"expectedOutput": [
					{
						"avg_rating": 8.8
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO movies (title, rating) VALUES ('Joker', 8.8);",
				"expectedOutput": [
					{
						"avg_rating": 8.8
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 3,
		"title": "Employee Salary Ranking within Department",
		"description": "Write a query on the `employees` table to rank employees by salary within each department, handling ties by giving the same rank. Return department, employee_name, salary, and salary_rank.",
		"marks": 6,
		"schema": "CREATE TABLE employees (id INTEGER PRIMARY KEY AUTO_INCREMENT, employee_name TEXT, department TEXT, salary INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employees (employee_name, department, salary) VALUES ('John','HR',50000),('Jane','HR',55000),('Mike','HR',50000),('Sarah','IT',70000),('Tom','IT',65000);",
				"expectedOutput": [
					{
						"department": "HR",
						"employee_name": "Jane",
						"salary": 55000,
						"salary_rank": 1
					},
					{
						"department": "HR",
						"employee_name": "John",
						"salary": 50000,
						"salary_rank": 2
					},
					{
						"department": "HR",
						"employee_name": "Mike",
						"salary": 50000,
						"salary_rank": 2
					},
					{
						"department": "IT",
						"employee_name": "Sarah",
						"salary": 70000,
						"salary_rank": 1
					},
					{
						"department": "IT",
						"employee_name": "Tom",
						"salary": 65000,
						"salary_rank": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employees (employee_name, department, salary) VALUES ('Alice','Finance',60000),('Bob','Finance',62000),('Carol','Finance',60000),('Dave','Marketing',45000);",
				"expectedOutput": [
					{
						"department": "Finance",
						"employee_name": "Bob",
						"salary": 62000,
						"salary_rank": 1
					},
					{
						"department": "Finance",
						"employee_name": "Alice",
						"salary": 60000,
						"salary_rank": 2
					},
					{
						"department": "Finance",
						"employee_name": "Carol",
						"salary": 60000,
						"salary_rank": 2
					},
					{
						"department": "Marketing",
						"employee_name": "Dave",
						"salary": 45000,
						"salary_rank": 1
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employees (employee_name, department, salary) VALUES ('Eve','Sales',40000),('Frank','Sales',42000),('Grace','Sales',42000),('Hank','Sales',39000);",
				"expectedOutput": [
					{
						"department": "Sales",
						"employee_name": "Frank",
						"salary": 42000,
						"salary_rank": 1
					},
					{
						"department": "Sales",
						"employee_name": "Grace",
						"salary": 42000,
						"salary_rank": 1
					},
					{
						"department": "Sales",
						"employee_name": "Eve",
						"salary": 40000,
						"salary_rank": 3
					},
					{
						"department": "Sales",
						"employee_name": "Hank",
						"salary": 39000,
						"salary_rank": 4
					}
				]
			}
		]
	},
	{
		"id": 4,
		"title": "Find Departments with More than 2 Employees",
		"description": "Write a SQL query on the `employees` table to retrieve the department names that have more than 2 employees. The output should include only the department column.",
		"schema": "CREATE TABLE employees (id INTEGER PRIMARY KEY, name TEXT, department TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employees (id, name, department) VALUES (1, 'Alice', 'HR'), (2, 'Bob', 'HR'), (3, 'Carol', 'HR'), (4, 'Dan', 'IT');",
				"expectedOutput": [
					{
						"department": "HR"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employees (id, name, department) VALUES (1, 'Eva', 'Finance'), (2, 'Frank', 'Finance'), (3, 'Grace', 'Finance'), (4, 'Heidi', 'Finance'), (5, 'Ivan', 'IT');",
				"expectedOutput": [
					{
						"department": "Finance"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employees (id, name, department) VALUES (1, 'Jack', 'Marketing'), (2, 'Kim', 'Marketing');",
				"expectedOutput": []
			}
		],
		"marks": 8
	},
	{
		"id": 5,
		"title": "Stock Status ",
		"description": "Write a query to classify products as 'In Stock' (quantity > 0) or 'Out of Stock' (quantity = 0) from the `inventory` table.",
		"schema": "CREATE TABLE inventory (id INTEGER PRIMARY KEY AUTO_INCREMENT, product TEXT, quantity INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO inventory (product, quantity) VALUES ('Laptop', 10), ('Phone', 0), ('Tablet', 5);",
				"expectedOutput": [
					{
						"product": "Laptop",
						"status": "In Stock"
					},
					{
						"product": "Phone",
						"status": "Out of Stock"
					},
					{
						"product": "Tablet",
						"status": "In Stock"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO inventory (product, quantity) VALUES ('Shoes', 0), ('Shirt', 0);",
				"expectedOutput": [
					{
						"product": "Shoes",
						"status": "Out of Stock"
					},
					{
						"product": "Shirt",
						"status": "Out of Stock"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO inventory (product, quantity) VALUES ('Pen', 3), ('Notebook', 2);",
				"expectedOutput": [
					{
						"product": "Pen",
						"status": "In Stock"
					},
					{
						"product": "Notebook",
						"status": "In Stock"
					}
				]
			}
		],
		"marks": 6
	},
	{
		"id": 6,
		"title": "Employee Project Work Analysis",
		"description": "Given three tables `employees`, `projects`, and `work_logs`, write a query to calculate, for each employee and month, the total hours worked, the average daily hours, and a flag indicating whether they exceeded 160 hours in that month. Return employee_name, project_name, month (YYYY-MM), total_hours, avg_daily_hours (rounded to 2 decimals), and overworked_flag (Y/N). Exclude months where an employee logged zero hours.",
		"marks": 12,
		"schema": "CREATE TABLE employees (id INTEGER PRIMARY KEY AUTO_INCREMENT, employee_name TEXT, department TEXT);\nCREATE TABLE projects (id INTEGER PRIMARY KEY AUTO_INCREMENT, project_name TEXT, start_date DATE, end_date DATE);\nCREATE TABLE work_logs (id INTEGER PRIMARY KEY AUTO_INCREMENT, employee_id INTEGER, project_id INTEGER, log_date DATE, hours_worked INTEGER, FOREIGN KEY (employee_id) REFERENCES employees(id), FOREIGN KEY (project_id) REFERENCES projects(id));",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employees (employee_name, department) VALUES ('Alice','IT'),('Bob','HR'),('Charlie','Finance');\nINSERT INTO projects (project_name, start_date, end_date) VALUES ('Website Revamp','2023-01-01','2023-03-31'),('HR System','2023-02-01','2023-04-30');\nINSERT INTO work_logs (employee_id, project_id, log_date, hours_worked) VALUES (1,1,'2023-01-05',8),(1,1,'2023-01-06',7),(1,1,'2023-01-15',9),(1,1,'2023-01-20',6),(1,1,'2023-01-25',8),(2,2,'2023-02-01',8),(2,2,'2023-02-02',8),(2,2,'2023-02-10',7),(3,1,'2023-01-10',5),(3,1,'2023-01-11',4);",
				"expectedOutput": [
					{
						"employee_name": "Alice",
						"project_name": "Website Revamp",
						"month": "2023-01",
						"total_hours": 38,
						"avg_daily_hours": 7.6,
						"overworked_flag": "N"
					},
					{
						"employee_name": "Bob",
						"project_name": "HR System",
						"month": "2023-02",
						"total_hours": 23,
						"avg_daily_hours": 7.67,
						"overworked_flag": "N"
					},
					{
						"employee_name": "Charlie",
						"project_name": "Website Revamp",
						"month": "2023-01",
						"total_hours": 9,
						"avg_daily_hours": 4.5,
						"overworked_flag": "N"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employees (employee_name, department) VALUES ('David','IT'),('Eva','Marketing');\nINSERT INTO projects (project_name, start_date, end_date) VALUES ('Mobile App','2023-03-01','2023-06-30'),('Campaign','2023-03-15','2023-03-31');\nINSERT INTO work_logs (employee_id, project_id, log_date, hours_worked) VALUES (1,1,'2023-03-01',10),(1,1,'2023-03-02',12),(1,1,'2023-03-05',9),(1,1,'2023-03-06',11),(1,1,'2023-03-07',10),(1,1,'2023-03-08',10),(1,1,'2023-03-09',12),(1,1,'2023-03-10',11),(1,1,'2023-03-15',8),(1,1,'2023-03-16',9),(2,2,'2023-03-15',7),(2,2,'2023-03-20',8);",
				"expectedOutput": [
					{
						"employee_name": "David",
						"project_name": "Mobile App",
						"month": "2023-03",
						"total_hours": 102,
						"avg_daily_hours": 10.2,
						"overworked_flag": "N"
					},
					{
						"employee_name": "Eva",
						"project_name": "Campaign",
						"month": "2023-03",
						"total_hours": 15,
						"avg_daily_hours": 7.5,
						"overworked_flag": "N"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employees (employee_name, department) VALUES ('Frank','Sales');\nINSERT INTO projects (project_name, start_date, end_date) VALUES ('Big Deal','2023-04-01','2023-04-30');\nINSERT INTO work_logs (employee_id, project_id, log_date, hours_worked) VALUES (1,1,'2023-04-01',10),(1,1,'2023-04-02',12),(1,1,'2023-04-03',11),(1,1,'2023-04-04',12),(1,1,'2023-04-05',10),(1,1,'2023-04-06',9),(1,1,'2023-04-07',11),(1,1,'2023-04-08',12),(1,1,'2023-04-09',11),(1,1,'2023-04-10',10),(1,1,'2023-04-11',12),(1,1,'2023-04-12',11),(1,1,'2023-04-13',10),(1,1,'2023-04-14',12),(1,1,'2023-04-15',11),(1,1,'2023-04-16',10),(1,1,'2023-04-17',9),(1,1,'2023-04-18',12),(1,1,'2023-04-19',11),(1,1,'2023-04-20',12),(1,1,'2023-04-21',11);",
				"expectedOutput": [
					{
						"employee_name": "Frank",
						"project_name": "Big Deal",
						"month": "2023-04",
						"total_hours": 226,
						"avg_daily_hours": 10.76,
						"overworked_flag": "Y"
					}
				]
			}
		]
	},
	{
		"id": 7,
		"title": "Find Courses Without Instructor",
		"description": "Write a query to retrieve course names with NULL instructor from the `courses` table.",
		"marks": 5,
		"schema": "CREATE TABLE courses (id INTEGER PRIMARY KEY AUTO_INCREMENT, course_name TEXT, instructor TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO courses (course_name, instructor) VALUES ('Math', NULL), ('Science', 'Dr. Smith'), ('History', NULL);",
				"expectedOutput": [
					{
						"course_name": "Math"
					},
					{
						"course_name": "History"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO courses (course_name, instructor) VALUES ('Physics', NULL), ('Chemistry', 'Dr. Ray');",
				"expectedOutput": [
					{
						"course_name": "Physics"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO courses (course_name, instructor) VALUES ('Biology', NULL), ('English', NULL), ('Economics', 'Dr. Khan');",
				"expectedOutput": [
					{
						"course_name": "Biology"
					},
					{
						"course_name": "English"
					}
				]
			}
		]
	},
	{
		"id": 8,
		"title": "Find Top-K Models",
		"description": "Write a query to retrieve the top 2 models with the highest accuracy from the `ml_models` table.",
		"schema": "CREATE TABLE ml_models (id INTEGER PRIMARY KEY AUTO_INCREMENT, model_name TEXT, accuracy FLOAT, dataset_used TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO ml_models (model_name, accuracy, dataset_used) VALUES ('Random Forest', 0.91, 'Iris Dataset'), ('SVM', 0.92, 'MNIST Dataset'), ('Logistic Regression', 0.85, 'Spam Dataset');",
				"expectedOutput": [
					{
						"model_name": "SVM",
						"accuracy": 0.92,
						"dataset_used": "MNIST Dataset"
					},
					{
						"model_name": "Random Forest",
						"accuracy": 0.91,
						"dataset_used": "Iris Dataset"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO ml_models (model_name, accuracy, dataset_used) VALUES ('Neural Network', 0.88, 'ImageNet Dataset'), ('KNN', 0.80, 'CIFAR-10'), ('Decision Tree', 0.90, 'MNIST Dataset');",
				"expectedOutput": [
					{
						"model_name": "Decision Tree",
						"accuracy": 0.9,
						"dataset_used": "MNIST Dataset"
					},
					{
						"model_name": "Neural Network",
						"accuracy": 0.88,
						"dataset_used": "ImageNet Dataset"
					}
				]
			}
		],
		"marks": 10
	},
	{
		"id": 9,
		"title": "Cities with Population Over 1M",
		"description": "Write a query to find cities with a population greater than 1 million from the `cities` table.",
		"schema": "CREATE TABLE cities (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, population INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO cities (name, population) VALUES ('Pune', 3500000), ('Nashik', 600000), ('Mumbai', 12400000);",
				"expectedOutput": [
					{
						"name": "Pune",
						"population": 3500000
					},
					{
						"name": "Mumbai",
						"population": 12400000
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO cities (name, population) VALUES ('Nagpur', 2400000), ('Aurangabad', 900000);",
				"expectedOutput": [
					{
						"name": "Nagpur",
						"population": 2400000
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO cities (name, population) VALUES ('Delhi', 19000000);",
				"expectedOutput": [
					{
						"name": "Delhi",
						"population": 19000000
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 10,
		"title": "Customers with Multiple Orders",
		"description": "Write a query to find customers who have placed more than one order from the `orders` table.",
		"schema": "CREATE TABLE orders (id INTEGER PRIMARY KEY AUTO_INCREMENT, customer TEXT, amount REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO orders (customer, amount) VALUES ('Alice', 500), ('Alice', 1200), ('Bob', 800), ('Bob', 950), ('Charlie', 700);",
				"expectedOutput": [
					{
						"customer": "Alice",
						"count": 2
					},
					{
						"customer": "Bob",
						"count": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO orders (customer, amount) VALUES ('David', 1500), ('Eve', 3000), ('David', 450);",
				"expectedOutput": [
					{
						"customer": "David",
						"count": 2
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO orders (customer, amount) VALUES ('Frank', 5000), ('Frank', 2000), ('Grace', 800);",
				"expectedOutput": [
					{
						"customer": "Frank",
						"count": 2
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 11,
		"title": "High Scoring Students",
		"description": "Write a query to find students who scored more than 80 in exams from table `exam_scores`",
		"schema": "CREATE TABLE exam_scores (id INTEGER PRIMARY KEY AUTO_INCREMENT, student TEXT, score INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO exam_scores (student, score) VALUES ('Alice', 85), ('Bob', 70), ('Carol', 90);",
				"expectedOutput": [
					{
						"student": "Alice",
						"score": 85
					},
					{
						"student": "Carol",
						"score": 90
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO exam_scores (student, score) VALUES ('Dan', 95), ('Eve', 60), ('Frank', 81);",
				"expectedOutput": [
					{
						"student": "Dan",
						"score": 95
					},
					{
						"student": "Frank",
						"score": 81
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO exam_scores (student, score) VALUES ('Grace', 78), ('Heidi', 99), ('Ivan', 88);",
				"expectedOutput": [
					{
						"student": "Heidi",
						"score": 99
					},
					{
						"student": "Ivan",
						"score": 88
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 12,
		"title": "Total Sales by Product",
		"description": "Write a query to calculate total sales for each product from the `sales` table.",
		"schema": "CREATE TABLE sales (id INTEGER PRIMARY KEY AUTO_INCREMENT, product TEXT, amount INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO sales (product, amount) VALUES ('Laptop', 1000), ('Laptop', 1500), ('Phone', 500);",
				"expectedOutput": [
					{
						"product": "Laptop",
						"total": 2500
					},
					{
						"product": "Phone",
						"total": 500
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO sales (product, amount) VALUES ('Tablet', 200), ('Tablet', 300), ('Monitor', 400);",
				"expectedOutput": [
					{
						"product": "Tablet",
						"total": 500
					},
					{
						"product": "Monitor",
						"total": 400
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO sales (product, amount) VALUES ('Headphones', 150), ('Headphones', 250), ('Mouse', 100);",
				"expectedOutput": [
					{
						"product": "Headphones",
						"total": 400
					},
					{
						"product": "Mouse",
						"total": 100
					}
				]
			}
		],
		"marks": 6
	},
	{
		"id": 13,
		"title": "Department Headcount Growth",
		"description": "Write a query on the `employee_history` table to calculate headcount growth by department between two periods. Compare 'Q1 2024' vs 'Q4 2023'. Return department, q4_2023_count, q1_2024_count, growth_count, and growth_percentage (rounded to 2 decimal places).",
		"marks": 8,
		"schema": "CREATE TABLE employee_history (id INTEGER PRIMARY KEY AUTO_INCREMENT, employee_id INTEGER, department TEXT, period TEXT, status TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employee_history (employee_id, department, period, status) VALUES (1,'IT','Q4 2023','Active'),(2,'IT','Q4 2023','Active'),(1,'IT','Q1 2024','Active'),(2,'IT','Q1 2024','Active'),(3,'IT','Q1 2024','Active'),(4,'HR','Q4 2023','Active'),(4,'HR','Q1 2024','Active'),(5,'HR','Q1 2024','Active'),(6,'HR','Q1 2024','Active');",
				"expectedOutput": [
					{
						"department": "HR",
						"q4_2023_count": 1,
						"q1_2024_count": 3,
						"growth_count": 2,
						"growth_percentage": 200
					},
					{
						"department": "IT",
						"q4_2023_count": 2,
						"q1_2024_count": 3,
						"growth_count": 1,
						"growth_percentage": 50
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employee_history (employee_id, department, period, status) VALUES (7,'Finance','Q4 2023','Active'),(8,'Finance','Q4 2023','Active'),(9,'Finance','Q4 2023','Active'),(7,'Finance','Q1 2024','Active'),(8,'Finance','Q1 2024','Active'),(9,'Finance','Q1 2024','Active'),(10,'Finance','Q1 2024','Active'),(11,'Sales','Q4 2023','Active'),(12,'Sales','Q4 2023','Active'),(13,'Sales','Q4 2023','Active'),(14,'Sales','Q4 2023','Active'),(11,'Sales','Q1 2024','Active'),(12,'Sales','Q1 2024','Active');",
				"expectedOutput": [
					{
						"department": "Finance",
						"q4_2023_count": 3,
						"q1_2024_count": 4,
						"growth_count": 1,
						"growth_percentage": 33.33
					},
					{
						"department": "Sales",
						"q4_2023_count": 4,
						"q1_2024_count": 2,
						"growth_count": -2,
						"growth_percentage": -50
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employee_history (employee_id, department, period, status) VALUES (15,'R&D','Q4 2023','Active'),(16,'R&D','Q4 2023','Active'),(17,'R&D','Q4 2023','Active'),(15,'R&D','Q1 2024','Active'),(16,'R&D','Q1 2024','Active'),(17,'R&D','Q1 2024','Active'),(18,'R&D','Q1 2024','Active'),(19,'Support','Q4 2023','Active'),(20,'Support','Q1 2024','Active');",
				"expectedOutput": [
					{
						"department": "R&D",
						"q4_2023_count": 3,
						"q1_2024_count": 4,
						"growth_count": 1,
						"growth_percentage": 33.33
					},
					{
						"department": "Support",
						"q4_2023_count": 1,
						"q1_2024_count": 1,
						"growth_count": 0,
						"growth_percentage": 0
					}
				]
			}
		]
	},
	{
		"id": 14,
		"title": "Average Marks",
		"description": "Write a query to calculate the average marks of students from the `marks` table.",
		"schema": "CREATE TABLE marks (id INTEGER PRIMARY KEY AUTO_INCREMENT, student TEXT, mark INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO marks (student, mark) VALUES ('Alice', 80), ('Bob', 70), ('Carol', 90);",
				"expectedOutput": [
					{
						"avg": 80
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO marks (student, mark) VALUES ('Dan', 100), ('Eve', 50), ('Frank', 50);",
				"expectedOutput": [
					{
						"avg": 66.67
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO marks (student, mark) VALUES ('Grace', 60), ('Heidi', 75), ('Ivan', 90);",
				"expectedOutput": [
					{
						"avg": 75
					}
				]
			}
		],
		"marks": 6
	},
	{
		"id": 15,
		"title": "Highest Salary",
		"description": "Write a query to find the highest salary from the `salaries` table.",
		"schema": "CREATE TABLE salaries (id INTEGER PRIMARY KEY AUTO_INCREMENT, employee TEXT, salary INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO salaries (employee, salary) VALUES ('Alice', 5000), ('Bob', 7000), ('Carol', 6000);",
				"expectedOutput": [
					{
						"salary": 7000
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO salaries (employee, salary) VALUES ('Dan', 8000), ('Eve', 7500), ('Frank', 8200);",
				"expectedOutput": [
					{
						"salary": 8200
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO salaries (employee, salary) VALUES ('Grace', 4000), ('Heidi', 9500), ('Ivan', 9200);",
				"expectedOutput": [
					{
						"salary": 9500
					}
				]
			}
		],
		"marks": 6
	},
	{
		"id": 16,
		"title": "Highest and Lowest Salary per Department",
		"description": "Write a query on the `employees` table to find the highest and lowest salary in each department",
		"schema": "CREATE TABLE employees (id INTEGER PRIMARY KEY AUTO_INCREMENT, employee_name TEXT, department TEXT, salary INTEGER);",
		"marks": 6,
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employees (employee_name, department, salary) VALUES ('Alice','IT',90000),('Bob','IT',75000),('Carol','HR',80000),('Dan','HR',60000),('Eve','Finance',70000);",
				"expectedOutput": [
					{
						"department": "Finance",
						"max_salary": 70000,
						"min_salary": 70000
					},
					{
						"department": "HR",
						"max_salary": 80000,
						"min_salary": 60000
					},
					{
						"department": "IT",
						"max_salary": 90000,
						"min_salary": 75000
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employees (employee_name, department, salary) VALUES ('Sam','Sales',50000),('Tom','Sales',55000),('Nina','Sales',45000);",
				"expectedOutput": [
					{
						"department": "Sales",
						"max_salary": 55000,
						"min_salary": 45000
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employees (employee_name, department, salary) VALUES ('Max','Tech',120000),('Zoe','Tech',120000),('Kyle','Tech',90000);",
				"expectedOutput": [
					{
						"department": "Tech",
						"max_salary": 120000,
						"min_salary": 90000
					}
				]
			}
		]
	},
	{
		"id": 17,
		"title": "Track Software Versions",
		"description": "Write a query to retrieve the latest version of each software from the `software_versions` table.",
		"schema": "CREATE TABLE software_versions (id INTEGER PRIMARY KEY AUTO_INCREMENT, software_name TEXT, version TEXT, release_date DATETIME);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO software_versions (software_name, version, release_date) VALUES ('Software A', '1.0', '2023-01-01'), ('Software A', '1.1', '2023-03-01'), ('Software B', '2.0', '2023-02-01');",
				"expectedOutput": [
					{
						"software_name": "Software A",
						"version": "1.1",
						"release_date": "2023-03-01"
					},
					{
						"software_name": "Software B",
						"version": "2.0",
						"release_date": "2023-02-01"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO software_versions (software_name, version, release_date) VALUES ('Software A', '1.0', '2023-01-01'), ('Software A', '1.2', '2023-04-01'), ('Software B', '2.0', '2023-02-01');",
				"expectedOutput": [
					{
						"software_name": "Software A",
						"version": "1.2",
						"release_date": "2023-04-01"
					},
					{
						"software_name": "Software B",
						"version": "2.0",
						"release_date": "2023-02-01"
					}
				]
			}
		],
		"marks": 6
	},
	{
		"id": 18,
		"title": "Track Failed Login Attempts by IP",
		"description": "Write a query to retrieve the count of failed login attempts for each IP address in the `login_attempts` table.",
		"schema": "CREATE TABLE login_attempts (id INTEGER PRIMARY KEY AUTO_INCREMENT, ip_address TEXT, status TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO login_attempts (ip_address, status) VALUES ('192.168.1.1', 'failed'), ('192.168.1.1', 'failed'), ('192.168.2.2', 'successful');",
				"expectedOutput": [
					{
						"ip_address": "192.168.1.1",
						"failed_attempts": 2
					},
					{
						"ip_address": "192.168.2.2",
						"failed_attempts": 0
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO login_attempts (ip_address, status) VALUES ('192.168.1.1', 'failed'), ('192.168.2.2', 'failed'), ('192.168.2.2', 'failed');",
				"expectedOutput": [
					{
						"ip_address": "192.168.1.1",
						"failed_attempts": 1
					},
					{
						"ip_address": "192.168.2.2",
						"failed_attempts": 2
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 19,
		"title": "Average Order Value per Customer",
		"description": "Write a query on the `orders` table to calculate the average order value for each customer",
		"schema": "CREATE TABLE orders (id INTEGER PRIMARY KEY AUTO_INCREMENT, customer TEXT, amount INTEGER);",
		"marks": 6,
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO orders (customer, amount) VALUES ('Alice',100),('Alice',200),('Alice',300),('Bob',150),('Bob',250);",
				"expectedOutput": [
					{
						"customer": "Alice",
						"avg_order_value": 200.0
					},
					{
						"customer": "Bob",
						"avg_order_value": 200.0
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO orders (customer, amount) VALUES ('Chris',400),('Chris',600),('Dana',1000);",
				"expectedOutput": [
					{
						"customer": "Chris",
						"avg_order_value": 500.0
					},
					{
						"customer": "Dana",
						"avg_order_value": 1000.0
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO orders (customer, amount) VALUES ('Eve',50),('Eve',150),('Eve',250),('Frank',300);",
				"expectedOutput": [
					{
						"customer": "Eve",
						"avg_order_value": 150.0
					},
					{
						"customer": "Frank",
						"avg_order_value": 300.0
					}
				]
			}
		]
	},
	{
		"id": 20,
		"title": "Employees Without Managers",
		"description": "Assume each employee may have a manager. Write a query on the `employees` table to find employees who do not have a manager assigned",
		"schema": "CREATE TABLE employees (id INTEGER PRIMARY KEY AUTO_INCREMENT, employee_name TEXT, department TEXT, manager_id INTEGER);",
		"marks": 6,
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employees (id, employee_name, department, manager_id) VALUES (1,'Alice','IT',NULL),(2,'Bob','IT',1),(3,'Carol','HR',NULL),(4,'Dan','HR',3);",
				"expectedOutput": [
					{
						"employee_name": "Alice",
						"department": "IT"
					},
					{
						"employee_name": "Carol",
						"department": "HR"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employees (id, employee_name, department, manager_id) VALUES (1,'Liam','Sales',NULL),(2,'Mia','Sales',1),(3,'Noah','Finance',NULL);",
				"expectedOutput": [
					{
						"employee_name": "Liam",
						"department": "Sales"
					},
					{
						"employee_name": "Noah",
						"department": "Finance"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employees (id, employee_name, department, manager_id) VALUES (1,'Olivia','Tech',NULL),(2,'Ethan','Tech',1),(3,'Sophia','Tech',2);",
				"expectedOutput": [
					{
						"employee_name": "Olivia",
						"department": "Tech"
					}
				]
			}
		]
	},
	{
		"id": 21,
		"title": "Orders by Category ",
		"description": "Write a query to count how many orders are placed in each category from the `orders` table.",
		"schema": "CREATE TABLE orders (id INTEGER PRIMARY KEY AUTO_INCREMENT, product TEXT, category TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO orders (product, category) VALUES ('Laptop', 'Electronics'), ('Phone', 'Electronics'), ('Shirt', 'Clothing');",
				"expectedOutput": [
					{
						"category": "Clothing",
						"order_count": 1
					},
					{
						"category": "Electronics",
						"order_count": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO orders (product, category) VALUES ('Table', 'Furniture'), ('Chair', 'Furniture'), ('Sofa', 'Furniture');",
				"expectedOutput": [
					{
						"category": "Furniture",
						"order_count": 3
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO orders (product, category) VALUES ('Pen', 'Stationery'), ('Book', 'Stationery'), ('Bag', 'Accessories');",
				"expectedOutput": [
					{
						"category": "Accessories",
						"order_count": 1
					},
					{
						"category": "Stationery",
						"order_count": 2
					}
				]
			}
		],
		"marks": 6
	},
	{
		"id": 22,
		"title": "Average Salary Insights ",
		"description": "Write a query to calculate the average salary for each department in the `staff` table.",
		"schema": "CREATE TABLE staff (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, department TEXT, salary INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO staff (name, department, salary) VALUES ('Alice', 'HR', 40000), ('Bob', 'IT', 50000), ('Charlie', 'IT', 70000);",
				"expectedOutput": [
					{
						"department": "HR",
						"avg_salary": 40000.0
					},
					{
						"department": "IT",
						"avg_salary": 60000.0
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO staff (name, department, salary) VALUES ('David', 'Sales', 45000), ('Eve', 'Sales', 55000);",
				"expectedOutput": [
					{
						"department": "Sales",
						"avg_salary": 50000.0
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO staff (name, department, salary) VALUES ('Frank', 'Finance', 60000), ('Grace', 'Finance', 40000), ('Helen', 'Finance', 50000);",
				"expectedOutput": [
					{
						"department": "Finance",
						"avg_salary": 50000.0
					}
				]
			}
		],
		"marks": 6
	},
	{
		"id": 23,
		"title": "Students per Department",
		"description": "Write a query to find how many students are in each department from the `students` table.",
		"schema": "CREATE TABLE students (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, department TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO students (name, department) VALUES ('John', 'IT'), ('Mary', 'CS'), ('Alex', 'IT');",
				"expectedOutput": [
					{
						"department": "IT",
						"count": 2
					},
					{
						"department": "CS",
						"count": 1
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO students (name, department) VALUES ('Sam', 'EE'), ('Rose', 'EE'), ('Tom', 'CS');",
				"expectedOutput": [
					{
						"department": "EE",
						"count": 2
					},
					{
						"department": "CS",
						"count": 1
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO students (name, department) VALUES ('Eva', 'ME');",
				"expectedOutput": [
					{
						"department": "ME",
						"count": 1
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 24,
		"title": "Running Total of Daily Sales",
		"description": "Write a query on the `daily_sales` table to calculate a running total of sales.",
		"marks": 6,
		"schema": "CREATE TABLE daily_sales (id INTEGER PRIMARY KEY AUTO_INCREMENT, sale_date DATE, daily_amount DECIMAL(8,2));",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO daily_sales (sale_date, daily_amount) VALUES ('2024-01-01',1000.00),('2024-01-02',1500.00),('2024-01-03',800.00),('2024-01-04',1200.00);",
				"expectedOutput": [
					{
						"sale_date": "2024-01-01",
						"daily_amount": 1000,
						"running_total": 1000
					},
					{
						"sale_date": "2024-01-02",
						"daily_amount": 1500,
						"running_total": 2500
					},
					{
						"sale_date": "2024-01-03",
						"daily_amount": 800,
						"running_total": 3300
					},
					{
						"sale_date": "2024-01-04",
						"daily_amount": 1200,
						"running_total": 4500
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO daily_sales (sale_date, daily_amount) VALUES ('2024-02-01',2000.00),('2024-02-02',1800.00),('2024-02-03',2200.00);",
				"expectedOutput": [
					{
						"sale_date": "2024-02-01",
						"daily_amount": 2000,
						"running_total": 2000
					},
					{
						"sale_date": "2024-02-02",
						"daily_amount": 1800,
						"running_total": 3800
					},
					{
						"sale_date": "2024-02-03",
						"daily_amount": 2200,
						"running_total": 6000
					}
				]
			}
		]
	},
	{
		"id": 25,
		"title": "Track Unique Security Breaches",
		"description": "Write a query to retrieve all unique types of security breaches reported in the `security_breach_reports` table.",
		"schema": "CREATE TABLE security_breach_reports (id INTEGER PRIMARY KEY AUTO_INCREMENT, breach_type TEXT, severity TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO security_breach_reports (breach_type, severity) VALUES ('Data Leak', 'High'), ('SQL Injection', 'Medium'), ('Malware', 'High');",
				"expectedOutput": [
					{
						"breach_type": "Data Leak"
					},
					{
						"breach_type": "SQL Injection"
					},
					{
						"breach_type": "Malware"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO security_breach_reports (breach_type, severity) VALUES ('Phishing', 'Low'), ('Data Leak', 'High'), ('DDoS', 'Medium');",
				"expectedOutput": [
					{
						"breach_type": "Phishing"
					},
					{
						"breach_type": "Data Leak"
					},
					{
						"breach_type": "DDoS"
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 26,
		"title": "Customer Order Frequency Analysis",
		"description": "Write a query on the `customer_orders` table to categorize customers based on their order count: 'High' (5+ orders), 'Medium' (2-4 orders), 'Low' (1 order). Return customer_id, order_count, and frequency_category.",
		"marks": 6,
		"schema": "CREATE TABLE customer_orders (id INTEGER PRIMARY KEY AUTO_INCREMENT, customer_id INTEGER, order_date DATE, amount DECIMAL(8,2));",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO customer_orders (customer_id, order_date, amount) VALUES (1,'2024-01-01',100),(1,'2024-01-15',150),(1,'2024-02-01',200),(2,'2024-01-05',75),(2,'2024-01-20',125),(2,'2024-02-10',90),(2,'2024-02-25',110),(2,'2024-03-05',85),(3,'2024-01-10',300);",
				"expectedOutput": [
					{
						"customer_id": 2,
						"order_count": 5,
						"frequency_category": "High"
					},
					{
						"customer_id": 1,
						"order_count": 3,
						"frequency_category": "Medium"
					},
					{
						"customer_id": 3,
						"order_count": 1,
						"frequency_category": "Low"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO customer_orders (customer_id, order_date, amount) VALUES (4,'2024-01-01',50),(4,'2024-01-10',60),(5,'2024-01-05',200),(5,'2024-01-12',180),(5,'2024-01-20',220),(5,'2024-01-28',240),(5,'2024-02-05',210),(5,'2024-02-15',190);",
				"expectedOutput": [
					{
						"customer_id": 5,
						"order_count": 6,
						"frequency_category": "High"
					},
					{
						"customer_id": 4,
						"order_count": 2,
						"frequency_category": "Medium"
					}
				]
			}
		]
	},
	{
		"id": 27,
		"title": "Department Budget Utilization",
		"description": "Write a query on the `department_expenses` table to calculate budget utilization percentage for each department. Return department, total_expenses, budget, utilization_percent (rounded to 2 decimal places), and status ('Over Budget' if >100%, 'Within Budget' otherwise).",
		"marks": 6,
		"schema": "CREATE TABLE department_expenses (id INTEGER PRIMARY KEY AUTO_INCREMENT, department TEXT, expense_amount DECIMAL(10,2), budget DECIMAL(10,2));",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO department_expenses (department, expense_amount, budget) VALUES ('HR',4500,5000),('HR',2000,5000),('IT',7000,6000),('IT',1500,6000),('Finance',3000,4000);",
				"expectedOutput": [
					{
						"department": "IT",
						"total_expenses": 8500,
						"budget": 6000,
						"utilization_percent": 141.67,
						"status": "Over Budget"
					},
					{
						"department": "HR",
						"total_expenses": 6500,
						"budget": 5000,
						"utilization_percent": 130,
						"status": "Over Budget"
					},
					{
						"department": "Finance",
						"total_expenses": 3000,
						"budget": 4000,
						"utilization_percent": 75,
						"status": "Within Budget"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO department_expenses (department, expense_amount, budget) VALUES ('Marketing',2500,3000),('Marketing',800,3000),('Sales',4200,4000),('Operations',1500,2000);",
				"expectedOutput": [
					{
						"department": "Sales",
						"total_expenses": 4200,
						"budget": 4000,
						"utilization_percent": 105,
						"status": "Over Budget"
					},
					{
						"department": "Marketing",
						"total_expenses": 3300,
						"budget": 3000,
						"utilization_percent": 110,
						"status": "Over Budget"
					},
					{
						"department": "Operations",
						"total_expenses": 1500,
						"budget": 2000,
						"utilization_percent": 75,
						"status": "Within Budget"
					}
				]
			}
		]
	},
	{
		"id": 28,
		"title": "Student Grade Distribution",
		"description": "Write a query on the `student_scores` table to create grade distribution by subject. Grades are 'A' (90-100), 'B' (80-89), 'C' (70-79), 'D' (60-69), 'F' (<60). Return subject, grade, and student_count.",
		"marks": 6,
		"schema": "CREATE TABLE student_scores (id INTEGER PRIMARY KEY AUTO_INCREMENT, student_name TEXT, subject TEXT, score INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO student_scores (student_name, subject, score) VALUES ('Alice','Math',95),('Bob','Math',82),('Carol','Math',78),('Dave','Math',65),('Eve','Math',58),('Alice','Science',88),('Bob','Science',72);",
				"expectedOutput": [
					{
						"subject": "Math",
						"grade": "A",
						"student_count": 1
					},
					{
						"subject": "Math",
						"grade": "B",
						"student_count": 1
					},
					{
						"subject": "Math",
						"grade": "C",
						"student_count": 1
					},
					{
						"subject": "Math",
						"grade": "D",
						"student_count": 1
					},
					{
						"subject": "Math",
						"grade": "F",
						"student_count": 1
					},
					{
						"subject": "Science",
						"grade": "B",
						"student_count": 1
					},
					{
						"subject": "Science",
						"grade": "C",
						"student_count": 1
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO student_scores (student_name, subject, score) VALUES ('Frank','History',92),('Grace','History',85),('Henry','History',87),('Ivan','History',76),('Jack','English',94),('Kate','English',81);",
				"expectedOutput": [
					{
						"subject": "English",
						"grade": "A",
						"student_count": 1
					},
					{
						"subject": "English",
						"grade": "B",
						"student_count": 1
					},
					{
						"subject": "History",
						"grade": "A",
						"student_count": 1
					},
					{
						"subject": "History",
						"grade": "B",
						"student_count": 2
					},
					{
						"subject": "History",
						"grade": "C",
						"student_count": 1
					}
				]
			}
		]
	},
	{
		"id": 29,
		"title": "Employees by Department",
		"description": "Write a query to count employees in each department from the `employees` table.",
		"schema": "CREATE TABLE employees (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, department TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employees (name, department) VALUES ('John', 'HR'), ('Mary', 'Finance'), ('Alex', 'HR');",
				"expectedOutput": [
					{
						"department": "HR",
						"count": 2
					},
					{
						"department": "Finance",
						"count": 1
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employees (name, department) VALUES ('Sam', 'IT'), ('Rose', 'IT'), ('Tom', 'IT');",
				"expectedOutput": [
					{
						"department": "IT",
						"count": 3
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employees (name, department) VALUES ('Eva', 'Sales');",
				"expectedOutput": [
					{
						"department": "Sales",
						"count": 1
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 30,
		"title": "Longest Serving Employee ",
		"description": "Write a query to find the employee with the earliest joining date from the `employee_history` table.",
		"schema": "CREATE TABLE employee_history (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, join_date DATE);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employee_history (name, join_date) VALUES ('Alice', '2010-05-10'), ('Bob', '2015-06-20');",
				"expectedOutput": [
					{
						"name": "Alice",
						"join_date": "2010-05-10"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employee_history (name, join_date) VALUES ('Charlie', '2008-03-15'), ('David', '2012-07-19');",
				"expectedOutput": [
					{
						"name": "Charlie",
						"join_date": "2008-03-15"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employee_history (name, join_date) VALUES ('Eve', '2005-02-01'), ('Frank', '2011-09-23');",
				"expectedOutput": [
					{
						"name": "Eve",
						"join_date": "2005-02-01"
					}
				]
			}
		],
		"marks": 10
	},
	{
		"id": 31,
		"title": "Space Debris Tracking",
		"description": "Retrieve the heaviest space debris objects (mass above 1000 kg) from the `space_debris` table, but only include those whose orbit is either 'LEO' or 'GEO'. Return object_name, mass_kg, and orbit.",
		"schema": "CREATE TABLE space_debris (id INTEGER PRIMARY KEY AUTO_INCREMENT, object_name TEXT, mass_kg REAL, orbit TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO space_debris (object_name, mass_kg, orbit) VALUES ('Debris1', 1200, 'LEO'), ('Debris2', 800, 'MEO'), ('Debris3', 1500, 'GEO');",
				"expectedOutput": [
					{
						"object_name": "Debris3",
						"mass_kg": 1500,
						"orbit": "GEO"
					},
					{
						"object_name": "Debris1",
						"mass_kg": 1200,
						"orbit": "LEO"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO space_debris (object_name, mass_kg, orbit) VALUES ('Debris4', 2000, 'LEO'), ('Debris5', 900, 'GEO');",
				"expectedOutput": [
					{
						"object_name": "Debris4",
						"mass_kg": 2000,
						"orbit": "LEO"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO space_debris (object_name, mass_kg, orbit) VALUES ('Debris6', 3000, 'LEO');",
				"expectedOutput": [
					{
						"object_name": "Debris6",
						"mass_kg": 3000,
						"orbit": "LEO"
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 32,
		"title": "Endangered Species by Continent",
		"description": "Find all species in the `wildlife` table whose status is 'Endangered'",
		"schema": "CREATE TABLE wildlife (id INTEGER PRIMARY KEY AUTO_INCREMENT, species_name TEXT, continent TEXT, status TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO wildlife (species_name, continent, status) VALUES ('Tiger', 'Asia', 'Endangered'), ('Elephant', 'Africa', 'Vulnerable'), ('Panda', 'Asia', 'Endangered');",
				"expectedOutput": [
					{
						"species_name": "Tiger",
						"continent": "Asia",
						"status": "Endangered"
					},
					{
						"species_name": "Panda",
						"continent": "Asia",
						"status": "Endangered"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO wildlife (species_name, continent, status) VALUES ('Rhino', 'Africa', 'Endangered'), ('Kangaroo', 'Australia', 'Least Concern');",
				"expectedOutput": [
					{
						"species_name": "Rhino",
						"continent": "Africa",
						"status": "Endangered"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO wildlife (species_name, continent, status) VALUES ('Polar Bear', 'Arctic', 'Endangered');",
				"expectedOutput": [
					{
						"species_name": "Polar Bear",
						"continent": "Arctic",
						"status": "Endangered"
					}
				]
			}
		],
		"marks": 3
	},
	{
		"id": 33,
		"title": "Track Hardware Usage by User",
		"description": "Write a query to retrieve all users who have used a specific hardware component more than twice from the `hardware_usage` table.",
		"schema": "CREATE TABLE hardware_usage (id INTEGER PRIMARY KEY AUTO_INCREMENT, username TEXT, component_name TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO hardware_usage (username, component_name) VALUES ('user1', 'CPU'), ('user1', 'GPU'), ('user1', 'CPU'), ('user2', 'RAM');",
				"expectedOutput": [
					{
						"username": "user1"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO hardware_usage (username, component_name) VALUES ('user1', 'CPU'), ('user2', 'GPU');",
				"expectedOutput": []
			}
		],
		"marks": 8
	},
	{
		"id": 34,
		"title": "Track Hardware Component Availability",
		"description": "Write a query to retrieve the count of available hardware components in the `hardware_inventory` table.",
		"schema": "CREATE TABLE hardware_inventory (id INTEGER PRIMARY KEY AUTO_INCREMENT, component_name TEXT, availability_status TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO hardware_inventory (component_name, availability_status) VALUES ('CPU', 'available'), ('GPU', 'out_of_stock'), ('RAM', 'available');",
				"expectedOutput": [
					{
						"component_name": "CPU",
						"count": 1
					},
					{
						"component_name": "RAM",
						"count": 1
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO hardware_inventory (component_name, availability_status) VALUES ('CPU', 'out_of_stock'), ('GPU', 'out_of_stock');",
				"expectedOutput": []
			}
		],
		"marks": 8
	},
	{
		"id": 35,
		"title": "Top AI Models Above Domain Average",
		"description": "Find AI models from the `ai_models` table whose accuracy is above the average accuracy in their domain. Return domain, model_name, accuracy, domain_avg, and the difference (accuracy - domain_avg).",
		"schema": "CREATE TABLE ai_models (id INTEGER PRIMARY KEY AUTO_INCREMENT, model_name TEXT, domain TEXT, accuracy REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO ai_models (model_name, domain, accuracy) VALUES ('VisionNet', 'CV', 0.95), ('ObjectDetect', 'CV', 0.93), ('TextGPT', 'NLP', 0.97);",
				"expectedOutput": [
					{
						"domain": "CV",
						"model_name": "VisionNet",
						"accuracy": 0.95,
						"domain_avg": 0.94,
						"diff": 0.01
					},
					{
						"domain": "NLP",
						"model_name": "TextGPT",
						"accuracy": 0.97,
						"domain_avg": 0.97,
						"diff": 0.0
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO ai_models (model_name, domain, accuracy) VALUES ('SpeechAI', 'Speech', 0.92), ('VoiceRec', 'Speech', 0.88);",
				"expectedOutput": [
					{
						"domain": "Speech",
						"model_name": "SpeechAI",
						"accuracy": 0.92,
						"domain_avg": 0.9,
						"diff": 0.02
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO ai_models (model_name, domain, accuracy) VALUES ('BioNet', 'Bio', 0.99), ('HealthAI', 'Bio', 0.95);",
				"expectedOutput": [
					{
						"domain": "Bio",
						"model_name": "BioNet",
						"accuracy": 0.99,
						"domain_avg": 0.97,
						"diff": 0.02
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 36,
		"title": "Plastic Waste Cities Below Global Average",
		"description": "List cities from the `waste_management` table where the plastic recycling rate is below the global average. Return the city, country, plastic_recycling_rate, global_avg, and the difference (plastic_recycling_rate - global_avg).",
		"schema": "CREATE TABLE waste_management (id INTEGER PRIMARY KEY AUTO_INCREMENT, city TEXT, country TEXT, plastic_recycling_rate REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO waste_management (city, country, plastic_recycling_rate) VALUES ('Mumbai', 'India', 15), ('Tokyo', 'Japan', 25), ('NYC', 'USA', 10);",
				"expectedOutput": [
					{
						"city": "NYC",
						"country": "USA",
						"plastic_recycling_rate": 10,
						"global_avg": 16.67,
						"diff": -6.67
					},
					{
						"city": "Mumbai",
						"country": "India",
						"plastic_recycling_rate": 15,
						"global_avg": 16.67,
						"diff": -1.67
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO waste_management (city, country, plastic_recycling_rate) VALUES ('London', 'UK', 18), ('Paris', 'France', 22);",
				"expectedOutput": [
					{
						"city": "London",
						"country": "UK",
						"plastic_recycling_rate": 18,
						"global_avg": 20.0,
						"diff": -2.0
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 37,
		"title": "Highly Polluted Oceans Compared to Global Average",
		"description": "Retrieve ocean locations from the `ocean_pollution` table where the contamination level is above the global average. Return the ocean, region, contamination_level, global_avg, and the difference (contamination_level - global_avg).",
		"schema": "CREATE TABLE ocean_pollution (id INTEGER PRIMARY KEY AUTO_INCREMENT, ocean TEXT, region TEXT, contamination_level INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO ocean_pollution (ocean, region, contamination_level) VALUES ('Pacific', 'North', 80), ('Atlantic', 'South', 60), ('Indian', 'East', 90);",
				"expectedOutput": [
					{
						"ocean": "Indian",
						"region": "East",
						"contamination_level": 90,
						"global_avg": 76.67,
						"diff": 13.33
					},
					{
						"ocean": "Pacific",
						"region": "North",
						"contamination_level": 80,
						"global_avg": 76.67,
						"diff": 3.33
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO ocean_pollution (ocean, region, contamination_level) VALUES ('Arctic', 'North', 85), ('Southern', 'South', 70);",
				"expectedOutput": [
					{
						"ocean": "Arctic",
						"region": "North",
						"contamination_level": 85,
						"global_avg": 77.5,
						"diff": 7.5
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 38,
		"title": "Track Hardware Upgrades by User",
		"description": "Write a query to retrieve all users who have upgraded to a newer hardware component from the `hardware_upgrades` table.",
		"schema": "CREATE TABLE hardware_upgrades (id INTEGER PRIMARY KEY AUTO_INCREMENT, username TEXT, old_component TEXT, new_component TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO hardware_upgrades (username, old_component, new_component) VALUES ('user1', 'CPU', 'Intel i9'), ('user2', 'GPU', 'NVIDIA RTX 3080');",
				"expectedOutput": [
					{
						"username": "user1"
					},
					{
						"username": "user2"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO hardware_upgrades (username, old_component, new_component) VALUES ('user1', 'RAM', '16GB DDR4');",
				"expectedOutput": [
					{
						"username": "user1"
					}
				]
			}
		],
		"marks": 6
	},
	{
		"id": 39,
		"title": "Bright Celestial Objects Above Global Average",
		"description": "Find celestial objects from the `astronomy_data` table with brightness greater than the global average. Return the object_name, type, brightness, global_avg, and the difference (brightness - global_avg).",
		"schema": "CREATE TABLE astronomy_data (id INTEGER PRIMARY KEY AUTO_INCREMENT, object_name TEXT, type TEXT, brightness REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO astronomy_data (object_name, type, brightness) VALUES ('Betelgeuse', 'Star', 7.0), ('Sirius', 'Star', 4.8), ('Andromeda', 'Galaxy', 5.7);",
				"expectedOutput": [
					{
						"object_name": "Betelgeuse",
						"type": "Star",
						"brightness": 7.0,
						"global_avg": 5.83,
						"diff": 1.17
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO astronomy_data (object_name, type, brightness) VALUES ('Vega', 'Star', 5.9), ('Mars', 'Planet', 4.2);",
				"expectedOutput": [
					{
						"object_name": "Vega",
						"type": "Star",
						"brightness": 5.9,
						"global_avg": 5.05,
						"diff": 0.85
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 40,
		"title": "Countries Above Global Temperature Increase Average",
		"description": "Retrieve countries from the `climate_data` table whose temperature increase is greater than the global average in that year. Return the country, year, temp_increase, year_avg, and the difference (temp_increase - year_avg).",
		"schema": "CREATE TABLE climate_data (id INTEGER PRIMARY KEY AUTO_INCREMENT, country TEXT, year INTEGER, temp_increase REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO climate_data (country, year, temp_increase) VALUES ('India', 2024, 2.3), ('USA', 2024, 1.8), ('Australia', 2024, 2.5);",
				"expectedOutput": [
					{
						"country": "Australia",
						"year": 2024,
						"temp_increase": 2.5,
						"year_avg": 2.2,
						"diff": 0.3
					},
					{
						"country": "India",
						"year": 2024,
						"temp_increase": 2.3,
						"year_avg": 2.2,
						"diff": 0.1
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO climate_data (country, year, temp_increase) VALUES ('Brazil', 2024, 2.1), ('Canada', 2024, 1.5);",
				"expectedOutput": [
					{
						"country": "Brazil",
						"year": 2024,
						"temp_increase": 2.1,
						"year_avg": 1.8,
						"diff": 0.3
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 41,
		"title": "Renewable Energy Rankings",
		"description": "Rank renewable energy projects from `renewable_projects` table by efficiency and show top 3 projects for each type.",
		"schema": "CREATE TABLE renewable_projects (id INTEGER PRIMARY KEY AUTO_INCREMENT, project_name TEXT, type TEXT, efficiency REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO renewable_projects (project_name, type, efficiency) VALUES ('SolarMax', 'Solar', 0.92), ('SunPower', 'Solar', 0.95), ('WindOne', 'Wind', 0.88);",
				"expectedOutput": [
					{
						"type": "Solar",
						"project_name": "SunPower",
						"efficiency": 0.95
					},
					{
						"type": "Solar",
						"project_name": "SolarMax",
						"efficiency": 0.92
					},
					{
						"type": "Wind",
						"project_name": "WindOne",
						"efficiency": 0.88
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO renewable_projects (project_name, type, efficiency) VALUES ('HydroBlue', 'Hydro', 0.9), ('WindForce', 'Wind', 0.91);",
				"expectedOutput": [
					{
						"type": "Hydro",
						"project_name": "HydroBlue",
						"efficiency": 0.9
					},
					{
						"type": "Wind",
						"project_name": "WindForce",
						"efficiency": 0.91
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO renewable_projects (project_name, type, efficiency) VALUES ('GeoThermX', 'Geothermal', 0.89), ('GeoPower', 'Geothermal', 0.87), ('GeoSource', 'Geothermal', 0.85);",
				"expectedOutput": [
					{
						"type": "Geothermal",
						"project_name": "GeoThermX",
						"efficiency": 0.89
					},
					{
						"type": "Geothermal",
						"project_name": "GeoPower",
						"efficiency": 0.87
					},
					{
						"type": "Geothermal",
						"project_name": "GeoSource",
						"efficiency": 0.85
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 42,
		"title": "Wildlife Sightings by Region",
		"description": "List all wildlife sightings from the `sightings` table where the count is greater than 50.",
		"schema": "CREATE TABLE sightings (id INTEGER PRIMARY KEY AUTO_INCREMENT, species TEXT, region TEXT, count INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO sightings (species, region, count) VALUES ('Deer', 'North', 60), ('Tiger', 'East', 40), ('Elephant', 'West', 70);",
				"expectedOutput": [
					{
						"species": "Elephant",
						"region": "West",
						"count": 70
					},
					{
						"species": "Deer",
						"region": "North",
						"count": 60
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO sightings (species, region, count) VALUES ('Rhino', 'South', 55), ('Lion', 'North', 30);",
				"expectedOutput": [
					{
						"species": "Rhino",
						"region": "South",
						"count": 55
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO sightings (species, region, count) VALUES ('Bear', 'East', 90), ('Wolf', 'East', 65);",
				"expectedOutput": [
					{
						"species": "Bear",
						"region": "East",
						"count": 90
					},
					{
						"species": "Wolf",
						"region": "East",
						"count": 65
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 43,
		"title": "Urban Noise Monitoring",
		"description": "Find cities from the `noise_levels` table where the average noise is greater than 80 dB.",
		"schema": "CREATE TABLE noise_levels (id INTEGER PRIMARY KEY AUTO_INCREMENT, city TEXT, country TEXT, avg_noise_db REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO noise_levels (city, country, avg_noise_db) VALUES ('Mumbai', 'India', 85), ('London', 'UK', 70), ('LA', 'USA', 90);",
				"expectedOutput": [
					{
						"city": "LA",
						"country": "USA",
						"avg_noise_db": 90
					},
					{
						"city": "Mumbai",
						"country": "India",
						"avg_noise_db": 85
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO noise_levels (city, country, avg_noise_db) VALUES ('Tokyo', 'Japan', 82), ('Paris', 'France', 75);",
				"expectedOutput": [
					{
						"city": "Tokyo",
						"country": "Japan",
						"avg_noise_db": 82
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO noise_levels (city, country, avg_noise_db) VALUES ('Delhi', 'India', 95), ('Cairo', 'Egypt', 83);",
				"expectedOutput": [
					{
						"city": "Delhi",
						"country": "India",
						"avg_noise_db": 95
					},
					{
						"city": "Cairo",
						"country": "Egypt",
						"avg_noise_db": 83
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 44,
		"title": "Astronomy Bright Stars",
		"description": "List stars from the `stars` table where the magnitude is less than 2.5.",
		"schema": "CREATE TABLE stars (id INTEGER PRIMARY KEY AUTO_INCREMENT, star_name TEXT, constellation TEXT, magnitude REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO stars (star_name, constellation, magnitude) VALUES ('Sirius', 'Canis Major', 1.46), ('Vega', 'Lyra', 0.03), ('Betelgeuse', 'Orion', 2.7);",
				"expectedOutput": [
					{
						"star_name": "Vega",
						"constellation": "Lyra",
						"magnitude": 0.03
					},
					{
						"star_name": "Sirius",
						"constellation": "Canis Major",
						"magnitude": 1.46
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO stars (star_name, constellation, magnitude) VALUES ('Rigel', 'Orion', 0.12), ('Altair', 'Aquila', 2.1);",
				"expectedOutput": [
					{
						"star_name": "Rigel",
						"constellation": "Orion",
						"magnitude": 0.12
					},
					{
						"star_name": "Altair",
						"constellation": "Aquila",
						"magnitude": 2.1
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO stars (star_name, constellation, magnitude) VALUES ('Procyon', 'Canis Minor', 0.34), ('Capella', 'Auriga', 0.08);",
				"expectedOutput": [
					{
						"star_name": "Capella",
						"constellation": "Auriga",
						"magnitude": 0.08
					},
					{
						"star_name": "Procyon",
						"constellation": "Canis Minor",
						"magnitude": 0.34
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 45,
		"title": "Renewable Project Locations",
		"description": "List top renewable energy projects from the `projects` table with an efficiency greater than 90%.",
		"schema": "CREATE TABLE projects (id INTEGER PRIMARY KEY AUTO_INCREMENT, project_name TEXT, type TEXT, location TEXT, efficiency REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO projects (project_name, type, location, efficiency) VALUES ('SolarMax', 'Solar', 'India', 0.92), ('WindForce', 'Wind', 'USA', 0.88), ('HydroBlue', 'Hydro', 'Canada', 0.91);",
				"expectedOutput": [
					{
						"project_name": "SolarMax",
						"type": "Solar",
						"location": "India",
						"efficiency": 0.92
					},
					{
						"project_name": "HydroBlue",
						"type": "Hydro",
						"location": "Canada",
						"efficiency": 0.91
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO projects (project_name, type, location, efficiency) VALUES ('SunPower', 'Solar', 'Japan', 0.95), ('WindOne', 'Wind', 'Germany', 0.89);",
				"expectedOutput": [
					{
						"project_name": "SunPower",
						"type": "Solar",
						"location": "Japan",
						"efficiency": 0.95
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO projects (project_name, type, location, efficiency) VALUES ('GeoTherm', 'Geothermal', 'Iceland', 0.93);",
				"expectedOutput": [
					{
						"project_name": "GeoTherm",
						"type": "Geothermal",
						"location": "Iceland",
						"efficiency": 0.93
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 46,
		"title": "Customers with Less Than Half of Max Orders",
		"description": "From the `customers` table, return customers whose order_count is less than half of the maximum order_count across all customers. Handle ties carefully.",
		"schema": "CREATE TABLE customers (id INTEGER PRIMARY KEY, name TEXT, order_count INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO customers (id, name, order_count) VALUES (1, 'Alice', 20), (2, 'Bob', 5), (3, 'Charlie', 12);",
				"expectedOutput": [
					{
						"name": "Bob"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO customers (id, name, order_count) VALUES (1, 'David', 40), (2, 'Eva', 18), (3, 'Frank', 19);",
				"expectedOutput": [
					{
						"name": "Eva"
					},
					{
						"name": "Frank"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO customers (id, name, order_count) VALUES (1, 'Grace', 30), (2, 'Helen', 10), (3, 'Ian', 29);",
				"expectedOutput": [
					{
						"name": "Helen"
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 47,
		"title": "Second Highest Unique Score",
		"description": "From the `students` table, return all students whose score is the second-highest unique score. Handle cases with ties correctly.",
		"schema": "CREATE TABLE students (id INTEGER PRIMARY KEY, name TEXT, score INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO students (id, name, score) VALUES (1, 'Alice', 90), (2, 'Bob', 95), (3, 'Carol', 88);",
				"expectedOutput": [
					{
						"name": "Alice",
						"score": 90
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO students (id, name, score) VALUES (1, 'Dan', 100), (2, 'Eve', 100), (3, 'Frank', 80), (4, 'Grace', 90);",
				"expectedOutput": [
					{
						"name": "Grace",
						"score": 90
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO students (id, name, score) VALUES (1, 'Hank', 70), (2, 'Ivy', 85), (3, 'Jack', 85), (4, 'Kara', 95);",
				"expectedOutput": [
					{
						"name": "Ivy",
						"score": 85
					},
					{
						"name": "Jack",
						"score": 85
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 48,
		"title": "Flag Models with Insufficient Training Data",
		"description": "Write a query to select models trained on datasets with less than 1000 samples and mark them as 'Insufficient Data' in the `remarks` column in table `ml_models`.",
		"schema": "CREATE TABLE ml_models (id INTEGER PRIMARY KEY AUTO_INCREMENT, model_name TEXT, dataset_used TEXT, samples INTEGER, remarks TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO ml_models (model_name, dataset_used, samples, remarks) VALUES ('Random Forest', 'Iris Dataset', 150, NULL), ('SVM', 'MNIST Dataset', 60000, NULL), ('KNN', 'Custom Dataset', 500, NULL);",
				"expectedOutput": [
					{
						"model_name": "Random Forest",
						"dataset_used": "Iris Dataset",
						"samples": 150,
						"remarks": "Insufficient Data"
					},
					{
						"model_name": "KNN",
						"dataset_used": "Custom Dataset",
						"samples": 500,
						"remarks": "Insufficient Data"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO ml_models (model_name, dataset_used, samples, remarks) VALUES ('Logistic Regression', 'Spam Dataset', 800, NULL), ('Decision Tree', 'ImageNet Dataset', 10000, NULL);",
				"expectedOutput": [
					{
						"model_name": "Logistic Regression",
						"dataset_used": "Spam Dataset",
						"samples": 800,
						"remarks": "Insufficient Data"
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 49,
		"title": "Departments Whose Min Salary Exceeds Global Average",
		"description": "From the `employees` table, return departments where the minimum salary of that department is greater than the overall average salary across all employees.",
		"schema": "CREATE TABLE employees (id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employees (id, name, department, salary) VALUES (1, 'Alice', 'HR', 40000), (2, 'Bob', 'HR', 45000), (3, 'Carol', 'IT', 90000), (4, 'Dan', 'IT', 95000);",
				"expectedOutput": [
					{
						"department": "IT"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employees (id, name, department, salary) VALUES (1, 'Eve', 'Finance', 100000), (2, 'Frank', 'Finance', 120000), (3, 'Grace', 'Marketing', 30000);",
				"expectedOutput": [
					{
						"department": "Finance"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employees (id, name, department, salary) VALUES (1, 'Hank', 'IT', 70000), (2, 'Ivy', 'IT', 72000), (3, 'Jack', 'HR', 60000);",
				"expectedOutput": [
					{
						"department": "IT"
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 50,
		"title": "Find Products Just Below Category Maximum",
		"description": "From the `products` table, return all products whose price is equal to the highest price in their category that is strictly less than the maximum price of that category (i.e., the 'second maximum').",
		"schema": "CREATE TABLE products (id INTEGER PRIMARY KEY, name TEXT, category TEXT, price INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO products (id, name, category, price) VALUES (1, 'Laptop', 'Electronics', 2000), (2, 'Mouse', 'Electronics', 50), (3, 'Keyboard', 'Electronics', 500), (4, 'Monitor', 'Electronics', 1500);",
				"expectedOutput": [
					{
						"name": "Monitor",
						"price": 1500
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO products (id, name, category, price) VALUES (1, 'Phone', 'Gadgets', 1000), (2, 'Tablet', 'Gadgets', 800), (3, 'Charger', 'Gadgets', 200), (4, 'Smartwatch', 'Gadgets', 1000);",
				"expectedOutput": [
					{
						"name": "Tablet",
						"price": 800
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO products (id, name, category, price) VALUES (1, 'Book', 'Stationery', 40), (2, 'Pen', 'Stationery', 10), (3, 'Notebook', 'Stationery', 25);",
				"expectedOutput": [
					{
						"name": "Notebook",
						"price": 25
					}
				]
			}
		],
		"marks": 10
	},
	{
		"id": 51,
		"title": "Find Employees Without Managers",
		"description": "Write a query to retrieve employees who do not have a manager assigned (NULL in manager_id) from the `employees` table.",
		"marks": 5,
		"schema": "CREATE TABLE employees (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, manager_id INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employees (name, manager_id) VALUES ('Alice', NULL), ('Bob', 1), ('Charlie', NULL);",
				"expectedOutput": [
					{
						"name": "Alice"
					},
					{
						"name": "Charlie"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employees (name, manager_id) VALUES ('David', 2), ('Emma', NULL), ('Frank', 1);",
				"expectedOutput": [
					{
						"name": "Emma"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employees (name, manager_id) VALUES ('George', NULL), ('Helen', NULL), ('Ian', 3);",
				"expectedOutput": [
					{
						"name": "George"
					},
					{
						"name": "Helen"
					}
				]
			}
		]
	},
	{
		"id": 52,
		"title": "List High Capacity Plants",
		"description": "Write a query to retrieve plant_name and capacity_mw of plants where capacity_mw > 1000 from the `energy_plants` table.",
		"marks": 6,
		"schema": "CREATE TABLE energy_plants (id INTEGER PRIMARY KEY AUTO_INCREMENT, plant_name TEXT, type TEXT, capacity_mw INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO energy_plants (plant_name, type, capacity_mw) VALUES ('SolarOne', 'Solar', 800), ('NuclearX', 'Nuclear', 1500), ('HydroMax', 'Hydro', 1200);",
				"expectedOutput": [
					{
						"plant_name": "NuclearX",
						"capacity_mw": 1500
					},
					{
						"plant_name": "HydroMax",
						"capacity_mw": 1200
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO energy_plants (plant_name, type, capacity_mw) VALUES ('Windy', 'Wind', 500), ('MegaHydro', 'Hydro', 2000);",
				"expectedOutput": [
					{
						"plant_name": "MegaHydro",
						"capacity_mw": 2000
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO energy_plants (plant_name, type, capacity_mw) VALUES ('ThermoOne', 'Thermal', 1800), ('MiniHydro', 'Hydro', 300);",
				"expectedOutput": [
					{
						"plant_name": "ThermoOne",
						"capacity_mw": 1800
					}
				]
			}
		]
	},
	{
		"id": 53,
		"title": "Find Students Without Any Assigned Grade",
		"description": "Write a query on the `students` table to retrieve the names of students who do not have any grade assigned (NULL).",
		"marks": 5,
		"schema": "CREATE TABLE students (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, grade TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO students (name, grade) VALUES ('Alice', 'A'), ('Bob', NULL), ('Charlie', NULL);",
				"expectedOutput": [
					{
						"name": "Bob"
					},
					{
						"name": "Charlie"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO students (name, grade) VALUES ('David', 'B'), ('Emma', 'C'), ('Frank', NULL);",
				"expectedOutput": [
					{
						"name": "Frank"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO students (name, grade) VALUES ('George', NULL), ('Helen', NULL), ('Ian', 'A');",
				"expectedOutput": [
					{
						"name": "George"
					},
					{
						"name": "Helen"
					}
				]
			}
		]
	},
	{
		"id": 54,
		"title": "List Cities Having More Than One Customer",
		"description": "Write a query on the `customers` table to count customers per city and return only the cities that have more than one customer.",
		"marks": 7,
		"schema": "CREATE TABLE customers (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, city TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO customers (name, city) VALUES ('Alice', 'Pune'), ('Bob', 'Mumbai'), ('Charlie', 'Pune');",
				"expectedOutput": [
					{
						"city": "Pune",
						"count": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO customers (name, city) VALUES ('David', 'Delhi'), ('Emma', 'Delhi'), ('Frank', 'Delhi');",
				"expectedOutput": [
					{
						"city": "Delhi",
						"count": 3
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO customers (name, city) VALUES ('George', 'Bangalore'), ('Helen', 'Bangalore'), ('Ian', 'Pune');",
				"expectedOutput": [
					{
						"city": "Bangalore",
						"count": 2
					}
				]
			}
		]
	},
	{
		"id": 55,
		"title": "Identify Popular Datasets",
		"description": "Write a query to group models by the dataset used and find datasets used by more than two models in the table `ml_models`.",
		"schema": "CREATE TABLE ml_models (id INTEGER PRIMARY KEY AUTO_INCREMENT, model_name TEXT, dataset_used TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO ml_models (model_name, dataset_used) VALUES ('Random Forest', 'Iris Dataset'), ('SVM', 'MNIST Dataset'), ('Logistic Regression', 'MNIST Dataset'), ('Decision Tree', 'Iris Dataset'), ('KNN', 'Iris Dataset');",
				"expectedOutput": [
					{
						"dataset_used": "Iris Dataset",
						"model_count": 3
					},
					{
						"dataset_used": "MNIST Dataset",
						"model_count": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO ml_models (model_name, dataset_used) VALUES ('Neural Network', 'ImageNet Dataset'), ('SVM', 'CIFAR-10'), ('Logistic Regression', 'CIFAR-10'), ('Random Forest', 'CIFAR-10');",
				"expectedOutput": [
					{
						"dataset_used": "CIFAR-10",
						"model_count": 3
					}
				]
			}
		],
		"marks": 10
	},
	{
		"id": 56,
		"title": "Find Models with Missing Dataset Information",
		"description": "Write a query to retrieve models where the `dataset_used` column is NULL in the table `ml_models`.",
		"schema": "CREATE TABLE ml_models (id INTEGER PRIMARY KEY AUTO_INCREMENT, model_name TEXT, accuracy FLOAT, dataset_used TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO ml_models (model_name, accuracy, dataset_used) VALUES ('Random Forest', 0.91, 'Iris Dataset'), ('SVM', 0.79, NULL), ('Logistic Regression', 0.85, 'Spam Dataset');",
				"expectedOutput": [
					{
						"model_name": "SVM",
						"accuracy": 0.79,
						"dataset_used": null
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO ml_models (model_name, accuracy, dataset_used) VALUES ('Neural Network', 0.88, 'ImageNet Dataset'), ('KNN', 0.80, NULL);",
				"expectedOutput": [
					{
						"model_name": "KNN",
						"accuracy": 0.8,
						"dataset_used": null
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 57,
		"title": "Update Model Performance",
		"description": "Write a query to update the accuracy of models trained on the 'Iris Dataset' by adding 0.05 to their existing accuracy in the table `ml_models`.",
		"schema": "CREATE TABLE ml_models (id INTEGER PRIMARY KEY AUTO_INCREMENT, model_name TEXT, accuracy FLOAT, dataset_used TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO ml_models (model_name, accuracy, dataset_used) VALUES ('Random Forest', 0.91, 'Iris Dataset'), ('SVM', 0.79, 'MNIST Dataset'), ('Logistic Regression', 0.85, 'Iris Dataset');",
				"expectedOutput": [
					{
						"model_name": "Random Forest",
						"accuracy": 0.96,
						"dataset_used": "Iris Dataset"
					},
					{
						"model_name": "Logistic Regression",
						"accuracy": 0.9,
						"dataset_used": "Iris Dataset"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO ml_models (model_name, accuracy, dataset_used) VALUES ('Neural Network', 0.88, 'ImageNet Dataset'), ('KNN', 0.80, 'Iris Dataset');",
				"expectedOutput": [
					{
						"model_name": "KNN",
						"accuracy": 0.85,
						"dataset_used": "Iris Dataset"
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 58,
		"title": "Models with High Performance Across Datasets",
		"description": "Write a query to find models with accuracy greater than 0.85 and group them by `dataset_used`.",
		"schema": "CREATE TABLE ml_models (id INTEGER PRIMARY KEY AUTO_INCREMENT, model_name TEXT, accuracy FLOAT, dataset_used TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO ml_models (model_name, accuracy, dataset_used) VALUES ('Random Forest', 0.91, 'Iris Dataset'), ('SVM', 0.89, 'MNIST Dataset'), ('Logistic Regression', 0.75, 'Spam Dataset'), ('Decision Tree', 0.92, 'MNIST Dataset');",
				"expectedOutput": [
					{
						"dataset_used": "Iris Dataset",
						"model_count": 1
					},
					{
						"dataset_used": "MNIST Dataset",
						"model_count": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO ml_models (model_name, accuracy, dataset_used) VALUES ('Neural Network', 0.88, 'ImageNet Dataset'), ('KNN', 0.90, 'CIFAR-10'), ('Decision Tree', 0.75, 'MNIST Dataset'), ('Random Forest', 0.87, 'ImageNet Dataset');",
				"expectedOutput": [
					{
						"dataset_used": "CIFAR-10",
						"model_count": 1
					},
					{
						"dataset_used": "ImageNet Dataset",
						"model_count": 2
					}
				]
			}
		],
		"marks": 10
	},
	{
		"id": 59,
		"title": "Employees by Department",
		"description": "Write a query to count employees in each department from the `employees` table.",
		"schema": "CREATE TABLE employees (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, department TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employees (name, department) VALUES ('Alice', 'HR'), ('Bob', 'IT'), ('Carol', 'IT');",
				"expectedOutput": [
					{
						"department": "HR",
						"count": 1
					},
					{
						"department": "IT",
						"count": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employees (name, department) VALUES ('Dan', 'Finance'), ('Eve', 'Finance'), ('Frank', 'Finance');",
				"expectedOutput": [
					{
						"department": "Finance",
						"count": 3
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employees (name, department) VALUES ('Grace', 'Sales'), ('Heidi', 'Sales'), ('Ivan', 'HR');",
				"expectedOutput": [
					{
						"department": "HR",
						"count": 1
					},
					{
						"department": "Sales",
						"count": 2
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 60,
		"title": "Most Active Users in a Distributed System",
		"description": "Write a query to find the top 3 users who performed the most number of operations (insert, update, delete) on the `operations_log` table.",
		"schema": "CREATE TABLE operations_log (id INTEGER PRIMARY KEY AUTO_INCREMENT, user_id INTEGER, operation_type TEXT, timestamp DATETIME);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO operations_log (user_id, operation_type, timestamp) VALUES (1, 'insert', '2023-01-01 10:00:00'), (2, 'update', '2023-01-01 10:05:00'), (1, 'delete', '2023-01-01 10:10:00'), (3, 'insert', '2023-01-01 10:15:00'), (1, 'update', '2023-01-01 10:20:00'), (3, 'delete', '2023-01-01 10:25:00');",
				"expectedOutput": [
					{
						"user_id": 1,
						"operation_count": 3
					},
					{
						"user_id": 3,
						"operation_count": 2
					},
					{
						"user_id": 2,
						"operation_count": 1
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO operations_log (user_id, operation_type, timestamp) VALUES (4, 'insert', '2023-02-01 10:00:00'), (5, 'update', '2023-02-01 10:05:00'), (4, 'delete', '2023-02-01 10:10:00'), (5, 'insert', '2023-02-01 10:15:00'), (4, 'update', '2023-02-01 10:20:00');",
				"expectedOutput": [
					{
						"user_id": 4,
						"operation_count": 3
					},
					{
						"user_id": 5,
						"operation_count": 2
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 61,
		"title": "Track Top 5 Most Common Vulnerabilities",
		"description": "Write a query to retrieve the top 5 most common vulnerabilities reported in the `vulnerability_reports` table.",
		"schema": "CREATE TABLE vulnerability_reports (id INTEGER PRIMARY KEY AUTO_INCREMENT, vulnerability_type TEXT, severity TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO vulnerability_reports (vulnerability_type, severity) VALUES ('SQL Injection', 'High'), ('XSS', 'Medium'), ('Cross-site Request Forgery', 'High'), ('Privilege Escalation', 'High'), ('SQL Injection', 'High');",
				"expectedOutput": [
					{
						"vulnerability_type": "SQL Injection",
						"count": 2
					},
					{
						"vulnerability_type": "XSS",
						"count": 1
					},
					{
						"vulnerability_type": "Privilege Escalation",
						"count": 1
					},
					{
						"vulnerability_type": "Cross-site Request Forgery",
						"count": 1
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO vulnerability_reports (vulnerability_type, severity) VALUES ('DDoS', 'Low'), ('SQL Injection', 'High'), ('Buffer Overflow', 'High');",
				"expectedOutput": [
					{
						"vulnerability_type": "SQL Injection",
						"count": 1
					},
					{
						"vulnerability_type": "DDoS",
						"count": 1
					},
					{
						"vulnerability_type": "Buffer Overflow",
						"count": 1
					}
				]
			}
		],
		"marks": 6
	},
	{
		"id": 62,
		"title": "Employee Performance Score Quartiles",
		"description": "Write a query on the `employee_performance` table to assign quartile rankings (1-4) to employees based on their performance scores within each department. Return department, employee_name, performance_score, and quartile.",
		"marks": 10,
		"schema": "CREATE TABLE employee_performance (id INTEGER PRIMARY KEY AUTO_INCREMENT, employee_name TEXT, department TEXT, performance_score INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employee_performance (employee_name, department, performance_score) VALUES ('Alice','Sales',95),('Bob','Sales',88),('Carol','Sales',82),('Dave','Sales',76),('Eve','HR',92),('Frank','HR',85),('Grace','HR',78),('Henry','HR',71);",
				"expectedOutput": [
					{
						"department": "HR",
						"employee_name": "Eve",
						"performance_score": 92,
						"quartile": 1
					},
					{
						"department": "HR",
						"employee_name": "Frank",
						"performance_score": 85,
						"quartile": 2
					},
					{
						"department": "HR",
						"employee_name": "Grace",
						"performance_score": 78,
						"quartile": 3
					},
					{
						"department": "HR",
						"employee_name": "Henry",
						"performance_score": 71,
						"quartile": 4
					},
					{
						"department": "Sales",
						"employee_name": "Alice",
						"performance_score": 95,
						"quartile": 1
					},
					{
						"department": "Sales",
						"employee_name": "Bob",
						"performance_score": 88,
						"quartile": 2
					},
					{
						"department": "Sales",
						"employee_name": "Carol",
						"performance_score": 82,
						"quartile": 3
					},
					{
						"department": "Sales",
						"employee_name": "Dave",
						"performance_score": 76,
						"quartile": 4
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employee_performance (employee_name, department, performance_score) VALUES ('Ivan','IT',89),('Jack','IT',84),('Kate','IT',79),('Liam','IT',74),('Mia','IT',69),('Noah','IT',64);",
				"expectedOutput": [
					{
						"department": "IT",
						"employee_name": "Ivan",
						"performance_score": 89,
						"quartile": 1
					},
					{
						"department": "IT",
						"employee_name": "Jack",
						"performance_score": 84,
						"quartile": 1
					},
					{
						"department": "IT",
						"employee_name": "Kate",
						"performance_score": 79,
						"quartile": 2
					},
					{
						"department": "IT",
						"employee_name": "Liam",
						"performance_score": 74,
						"quartile": 2
					},
					{
						"department": "IT",
						"employee_name": "Mia",
						"performance_score": 69,
						"quartile": 3
					},
					{
						"department": "IT",
						"employee_name": "Noah",
						"performance_score": 64,
						"quartile": 4
					}
				]
			}
		]
	},
	{
		"id": 63,
		"title": "Product Category Revenue Share",
		"description": "Write a query on the `product_revenue` table to calculate each category's share of total revenue as a percentage. Return category, total_revenue, and revenue_share_percent (rounded to 2 decimal places).",
		"marks": 8,
		"schema": "CREATE TABLE product_revenue (id INTEGER PRIMARY KEY AUTO_INCREMENT, product_name TEXT, category TEXT, revenue DECIMAL(10,2));",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO product_revenue (product_name, category, revenue) VALUES ('Laptop','Electronics',15000),('Phone','Electronics',12000),('Desk','Furniture',8000),('Chair','Furniture',5000),('Book','Education',2000);",
				"expectedOutput": [
					{
						"category": "Electronics",
						"total_revenue": 27000,
						"revenue_share_percent": 64.29
					},
					{
						"category": "Furniture",
						"total_revenue": 13000,
						"revenue_share_percent": 30.95
					},
					{
						"category": "Education",
						"total_revenue": 2000,
						"revenue_share_percent": 4.76
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO product_revenue (product_name, category, revenue) VALUES ('Car','Automotive',50000),('Bike','Automotive',15000),('Shirt','Clothing',3000),('Pants','Clothing',4000),('Shoes','Clothing',5000);",
				"expectedOutput": [
					{
						"category": "Automotive",
						"total_revenue": 65000,
						"revenue_share_percent": 84.42
					},
					{
						"category": "Clothing",
						"total_revenue": 12000,
						"revenue_share_percent": 15.58
					}
				]
			}
		]
	},
	{
		"id": 64,
		"title": "Find Customer with Maximum Orders",
		"description": "Write a query on the `customers` and `orders` tables to return the customer(s) with the maximum number of orders placed.",
		"marks": 8,
		"schema": "CREATE TABLE customers (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT); CREATE TABLE orders (id INTEGER PRIMARY KEY AUTO_INCREMENT, customer_id INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO customers (name) VALUES ('Alice'), ('Bob'); INSERT INTO orders (customer_id) VALUES (1), (1), (2);",
				"expectedOutput": [
					{
						"name": "Alice",
						"order_count": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO customers (name) VALUES ('Charlie'), ('David'); INSERT INTO orders (customer_id) VALUES (2), (2), (2);",
				"expectedOutput": [
					{
						"name": "David",
						"order_count": 3
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO customers (name) VALUES ('Emma'); INSERT INTO orders (customer_id) VALUES (1), (1), (1), (1);",
				"expectedOutput": [
					{
						"name": "Emma",
						"order_count": 4
					}
				]
			}
		]
	},
	{
		"id": 65,
		"title": "Find Teachers with No Assigned Class",
		"description": "Write a query on the `teachers` and `classes` tables to retrieve teacher(s) who have not been assigned to any class.",
		"marks": 5,
		"schema": "CREATE TABLE teachers (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT); CREATE TABLE classes (id INTEGER PRIMARY KEY AUTO_INCREMENT, teacher_id INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO teachers (name) VALUES ('Alice'), ('Bob'); INSERT INTO classes (teacher_id) VALUES (1);",
				"expectedOutput": [
					{
						"name": "Bob"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO teachers (name) VALUES ('Charlie'), ('David'); -- no classes",
				"expectedOutput": [
					{
						"name": "Charlie"
					},
					{
						"name": "David"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO teachers (name) VALUES ('Emma'), ('Frank'); INSERT INTO classes (teacher_id) VALUES (2);",
				"expectedOutput": [
					{
						"name": "Emma"
					}
				]
			}
		]
	},
	{
		"id": 66,
		"title": "Find Latest Released Movie",
		"description": "Write a query on the `movies` table to return the most recently released movie(s).",
		"marks": 5,
		"schema": "CREATE TABLE movies (id INTEGER PRIMARY KEY AUTO_INCREMENT, title TEXT, release_year INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO movies (title, release_year) VALUES ('Movie A', 2014), ('Movie B', 2016), ('Movie C', 2018);",
				"expectedOutput": [
					{
						"title": "Movie C"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO movies (title, release_year) VALUES ('Movie D', 2020), ('Movie E', 2010);",
				"expectedOutput": [
					{
						"title": "Movie D"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO movies (title, release_year) VALUES ('Movie F', 2015), ('Movie G', 2022);",
				"expectedOutput": [
					{
						"title": "Movie G"
					}
				]
			}
		]
	},
	{
		"id": 67,
		"title": "Longest Consecutive Login Streak with Gaps",
		"description": "Write a query on the `user_logins` table to find the longest consecutive login streak for each user, where a streak is only broken if there's a gap of more than 2 days between login dates. Return user_id, max_streak_length, streak_start_date, streak_end_date. Only include users with at least one streak of 3+ days.",
		"marks": 10,
		"schema": "CREATE TABLE user_logins (id INTEGER PRIMARY KEY AUTO_INCREMENT, user_id INTEGER, login_date DATE);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO user_logins (user_id, login_date) VALUES (1,'2024-01-01'),(1,'2024-01-02'),(1,'2024-01-04'),(1,'2024-01-05'),(1,'2024-01-08'),(1,'2024-01-09'),(2,'2024-01-01'),(2,'2024-01-03'),(2,'2024-01-04'),(2,'2024-01-05'),(2,'2024-01-06'),(2,'2024-01-09'),(2,'2024-01-10');",
				"expectedOutput": [
					{
						"user_id": 1,
						"max_streak_length": 4,
						"streak_start_date": "2024-01-01",
						"streak_end_date": "2024-01-05"
					},
					{
						"user_id": 2,
						"max_streak_length": 5,
						"streak_start_date": "2024-01-01",
						"streak_end_date": "2024-01-06"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO user_logins (user_id, login_date) VALUES (3,'2024-02-01'),(3,'2024-02-02'),(3,'2024-02-05'),(3,'2024-02-06'),(3,'2024-02-07'),(3,'2024-02-11'),(4,'2024-02-01'),(4,'2024-02-04'),(4,'2024-02-06'),(4,'2024-02-07'),(4,'2024-02-08'),(4,'2024-02-09'),(4,'2024-02-10');",
				"expectedOutput": [
					{
						"user_id": 3,
						"max_streak_length": 5,
						"streak_start_date": "2024-02-01",
						"streak_end_date": "2024-02-07"
					},
					{
						"user_id": 4,
						"max_streak_length": 6,
						"streak_start_date": "2024-02-04",
						"streak_end_date": "2024-02-10"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO user_logins (user_id, login_date) VALUES (5,'2024-03-01'),(5,'2024-03-04'),(5,'2024-03-05'),(6,'2024-03-01'),(6,'2024-03-02'),(6,'2024-03-05'),(6,'2024-03-06'),(6,'2024-03-07'),(6,'2024-03-08');",
				"expectedOutput": [
					{
						"user_id": 6,
						"max_streak_length": 6,
						"streak_start_date": "2024-03-01",
						"streak_end_date": "2024-03-08"
					}
				]
			}
		]
	},
	{
		"id": 68,
		"title": "Products Priced Above 500",
		"description": "Write a query to list all products priced above 500 from the `products` table.",
		"schema": "CREATE TABLE products (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, price REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO products (name, price) VALUES ('Laptop', 600), ('Mouse', 200), ('Keyboard', 800);",
				"expectedOutput": [
					{
						"name": "Laptop",
						"price": 600.0
					},
					{
						"name": "Keyboard",
						"price": 800.0
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO products (name, price) VALUES ('Monitor', 1500), ('Pen Drive', 450);",
				"expectedOutput": [
					{
						"name": "Monitor",
						"price": 1500.0
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO products (name, price) VALUES ('Smartphone', 25000);",
				"expectedOutput": [
					{
						"name": "Smartphone",
						"price": 25000.0
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 69,
		"title": "Inventory Restock Prediction with Seasonality",
		"description": "Write a query on the `inventory_movements` table to predict when each product will need restocking. Calculate the average daily consumption rate over the last 30 days (by movement_date), then determine estimated days until stock runs out based on current_stock. Only include products with negative net movement (being consumed). Return product_id, current_stock, avg_daily_consumption (rounded to 2 decimal places), estimated_days_until_restock (rounded to 0 decimal places), movement_days_analyzed.",
		"marks": 10,
		"schema": "CREATE TABLE inventory_movements (id INTEGER PRIMARY KEY AUTO_INCREMENT, product_id INTEGER, movement_date DATE, quantity_change INTEGER, current_stock INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO inventory_movements (product_id, movement_date, quantity_change, current_stock) VALUES (101,'2024-01-01',-5,100),(101,'2024-01-03',-3,97),(101,'2024-01-05',-7,90),(101,'2024-01-08',-4,86),(101,'2024-01-10',-2,84),(102,'2024-01-01',-10,200),(102,'2024-01-02',-8,192),(102,'2024-01-04',-12,180),(102,'2024-01-06',-6,174),(103,'2024-01-01',5,50),(103,'2024-01-03',3,53);",
				"expectedOutput": [
					{
						"product_id": 101,
						"current_stock": 84,
						"avg_daily_consumption": 2.33,
						"estimated_days_until_restock": 36,
						"movement_days_analyzed": 9
					},
					{
						"product_id": 102,
						"current_stock": 174,
						"avg_daily_consumption": 7.2,
						"estimated_days_until_restock": 24,
						"movement_days_analyzed": 5
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO inventory_movements (product_id, movement_date, quantity_change, current_stock) VALUES (201,'2024-02-01',-15,300),(201,'2024-02-05',-20,280),(201,'2024-02-10',-10,270),(201,'2024-02-15',-25,245),(201,'2024-02-20',-18,227),(202,'2024-02-01',-8,150),(202,'2024-02-08',-12,138),(202,'2024-02-15',-6,132),(203,'2024-02-01',10,80),(203,'2024-02-10',5,85);",
				"expectedOutput": [
					{
						"product_id": 201,
						"current_stock": 227,
						"avg_daily_consumption": 4.58,
						"estimated_days_until_restock": 50,
						"movement_days_analyzed": 19
					},
					{
						"product_id": 202,
						"current_stock": 132,
						"avg_daily_consumption": 1.86,
						"estimated_days_until_restock": 71,
						"movement_days_analyzed": 14
					}
				]
			}
		]
	},
	{
		"id": 70,
		"title": "Employee Performance Rankings with Conditional Aggregations",
		"description": "Write a query on the `sales_records` table to find departments where the top 2 performers (by total_sales) have a combined sales amount that exceeds the department's average sales per employee by at least 50%. For qualifying departments, return: department, top_performer_name, second_performer_name, their_combined_sales, dept_avg_per_employee, and performance_ratio (combined/average). Only include departments with at least 4 employees.",
		"marks": 10,
		"schema": "CREATE TABLE sales_records (id INTEGER PRIMARY KEY AUTO_INCREMENT, employee_name TEXT, department TEXT, total_sales INTEGER, years_experience INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO sales_records (employee_name, department, total_sales, years_experience) VALUES ('Alice','Tech',150000,5),('Bob','Tech',140000,4),('Carol','Tech',80000,3),('Dave','Tech',70000,2),('Eve','Tech',60000,1),('Frank','Sales',200000,8),('Grace','Sales',180000,7),('Henry','Sales',90000,4),('Ivy','Sales',85000,3),('Jack','Sales',75000,2),('Karen','Marketing',120000,6),('Liam','Marketing',110000,5),('Mia','Marketing',50000,2),('Noah','Marketing',45000,1);",
				"expectedOutput": [
					{
						"department": "Sales",
						"top_performer_name": "Frank",
						"second_performer_name": "Grace",
						"their_combined_sales": 380000,
						"dept_avg_per_employee": 126000,
						"performance_ratio": 3.02
					},
					{
						"department": "Tech",
						"top_performer_name": "Alice",
						"second_performer_name": "Bob",
						"their_combined_sales": 290000,
						"dept_avg_per_employee": 100000,
						"performance_ratio": 2.9
					},
					{
						"department": "Marketing",
						"top_performer_name": "Karen",
						"second_performer_name": "Liam",
						"their_combined_sales": 230000,
						"dept_avg_per_employee": 81250,
						"performance_ratio": 2.83
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO sales_records (employee_name, department, total_sales, years_experience) VALUES ('Anna','Finance',95000,4),('Ben','Finance',90000,3),('Cathy','Finance',88000,3),('Dan','Finance',85000,2),('Emma','Finance',82000,2),('Felix','HR',75000,5),('Gina','HR',70000,4),('Hugo','HR',68000,3),('Iris','HR',65000,2),('John','Operations',110000,6),('Kate','Operations',105000,5),('Luke','Operations',60000,2),('Mary','Operations',58000,1),('Nick','Operations',55000,1);",
				"expectedOutput": [
					{
						"department": "Operations",
						"top_performer_name": "John",
						"second_performer_name": "Kate",
						"their_combined_sales": 215000,
						"dept_avg_per_employee": 77600,
						"performance_ratio": 2.77
					},
					{
						"department": "Finance",
						"top_performer_name": "Anna",
						"second_performer_name": "Ben",
						"their_combined_sales": 185000,
						"dept_avg_per_employee": 88000,
						"performance_ratio": 2.1
					},
					{
						"department": "HR",
						"top_performer_name": "Felix",
						"second_performer_name": "Gina",
						"their_combined_sales": 145000,
						"dept_avg_per_employee": 69500,
						"performance_ratio": 2.09
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO sales_records (employee_name, department, total_sales, years_experience) VALUES ('Alex','Research',80000,4),('Bella','Research',78000,3),('Chris','Research',76000,3),('Diana','Research',74000,2),('Ethan','Research',72000,2),('Fiona','Legal',65000,5),('George','Legal',63000,4),('Helen','Legal',61000,3),('Ian','Legal',59000,2),('Jake','IT',90000,5),('Kim','IT',45000,2),('Leo','IT',40000,1);",
				"expectedOutput": [
					{
						"department": "Research",
						"top_performer_name": "Alex",
						"second_performer_name": "Bella",
						"their_combined_sales": 158000,
						"dept_avg_per_employee": 76000,
						"performance_ratio": 2.08
					},
					{
						"department": "Legal",
						"top_performer_name": "Fiona",
						"second_performer_name": "George",
						"their_combined_sales": 128000,
						"dept_avg_per_employee": 62000,
						"performance_ratio": 2.06
					}
				]
			}
		]
	},
	{
		"id": 71,
		"title": "Top 3 Students by Subject",
		"description": "Write a query on the `student_grades` table to find the top 3 students with the highest scores in each subject. Return subject, student_name, score, and rank.",
		"marks": 6,
		"schema": "CREATE TABLE student_grades (id INTEGER PRIMARY KEY AUTO_INCREMENT, student_name TEXT, subject TEXT, score INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO student_grades (student_name, subject, score) VALUES ('Alice','Math',95),('Bob','Math',88),('Carol','Math',92),('Dave','Math',85),('Alice','Science',89),('Bob','Science',94),('Carol','Science',87);",
				"expectedOutput": [
					{
						"subject": "Math",
						"student_name": "Alice",
						"score": 95,
						"rank": 1
					},
					{
						"subject": "Math",
						"student_name": "Carol",
						"score": 92,
						"rank": 2
					},
					{
						"subject": "Math",
						"student_name": "Bob",
						"score": 88,
						"rank": 3
					},
					{
						"subject": "Science",
						"student_name": "Bob",
						"score": 94,
						"rank": 1
					},
					{
						"subject": "Science",
						"student_name": "Alice",
						"score": 89,
						"rank": 2
					},
					{
						"subject": "Science",
						"student_name": "Carol",
						"score": 87,
						"rank": 3
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO student_grades (student_name, subject, score) VALUES ('Eve','History',78),('Frank','History',82),('Grace','History',90),('Henry','History',85),('Eve','English',92),('Frank','English',89);",
				"expectedOutput": [
					{
						"subject": "English",
						"student_name": "Eve",
						"score": 92,
						"rank": 1
					},
					{
						"subject": "English",
						"student_name": "Frank",
						"score": 89,
						"rank": 2
					},
					{
						"subject": "History",
						"student_name": "Grace",
						"score": 90,
						"rank": 1
					},
					{
						"subject": "History",
						"student_name": "Henry",
						"score": 85,
						"rank": 2
					},
					{
						"subject": "History",
						"student_name": "Frank",
						"score": 82,
						"rank": 3
					}
				]
			}
		]
	},
	{
		"id": 72,
		"title": "Monthly Sales Growth Rate",
		"description": "Write a query on the `monthly_sales` table to calculate the month-over-month growth rate as a percentage. Return month, sales_amount, previous_month_sales, and growth_rate_percent (rounded to 2 decimal places). Skip the first month since it has no previous data.",
		"marks": 8,
		"schema": "CREATE TABLE monthly_sales (id INTEGER PRIMARY KEY AUTO_INCREMENT, month TEXT, sales_amount DECIMAL(10,2));",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO monthly_sales (month, sales_amount) VALUES ('2024-01',10000),('2024-02',12000),('2024-03',11500),('2024-04',13000);",
				"expectedOutput": [
					{
						"month": "2024-02",
						"sales_amount": 12000,
						"previous_month_sales": 10000,
						"growth_rate_percent": 20
					},
					{
						"month": "2024-03",
						"sales_amount": 11500,
						"previous_month_sales": 12000,
						"growth_rate_percent": -4.17
					},
					{
						"month": "2024-04",
						"sales_amount": 13000,
						"previous_month_sales": 11500,
						"growth_rate_percent": 13.04
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO monthly_sales (month, sales_amount) VALUES ('2024-05',15000),('2024-06',16500),('2024-07',14800);",
				"expectedOutput": [
					{
						"month": "2024-06",
						"sales_amount": 16500,
						"previous_month_sales": 15000,
						"growth_rate_percent": 10
					},
					{
						"month": "2024-07",
						"sales_amount": 14800,
						"previous_month_sales": 16500,
						"growth_rate_percent": -10.3
					}
				]
			}
		]
	},
	{
		"id": 73,
		"title": "Top Spenders Only ",
		"description": "Write a query to find customers who spent more than 500 in total from the `purchases` table.",
		"schema": "CREATE TABLE purchases (id INTEGER PRIMARY KEY AUTO_INCREMENT, customer TEXT, amount INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO purchases (customer, amount) VALUES ('Alice', 200), ('Alice', 400), ('Bob', 100);",
				"expectedOutput": [
					{
						"customer": "Alice",
						"total_spent": 600
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO purchases (customer, amount) VALUES ('Charlie', 250), ('Charlie', 300), ('David', 600);",
				"expectedOutput": [
					{
						"customer": "Charlie",
						"total_spent": 550
					},
					{
						"customer": "David",
						"total_spent": 600
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO purchases (customer, amount) VALUES ('Eva', 700), ('Frank', 200), ('Frank', 400);",
				"expectedOutput": [
					{
						"customer": "Eva",
						"total_spent": 700
					},
					{
						"customer": "Frank",
						"total_spent": 600
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 74,
		"title": "Frequent Travelers ",
		"description": "Write a query to list passengers who booked more than one flight from the `flights` table.",
		"schema": "CREATE TABLE flights (id INTEGER PRIMARY KEY AUTO_INCREMENT, passenger TEXT, destination TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO flights (passenger, destination) VALUES ('Alice', 'NY'), ('Alice', 'LA'), ('Bob', 'NY');",
				"expectedOutput": [
					{
						"passenger": "Alice",
						"flight_count": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO flights (passenger, destination) VALUES ('Charlie', 'TX'), ('Charlie', 'CA'), ('Charlie', 'FL'), ('David', 'CA');",
				"expectedOutput": [
					{
						"passenger": "Charlie",
						"flight_count": 3
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO flights (passenger, destination) VALUES ('Eva', 'TX'), ('Eva', 'NY'), ('Eva', 'FL');",
				"expectedOutput": [
					{
						"passenger": "Eva",
						"flight_count": 3
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 75,
		"title": "Branch Bestsellers ",
		"description": "Write a query to find the product with the highest sales in each store branch from the `sales` table.",
		"schema": "CREATE TABLE sales (id INTEGER PRIMARY KEY AUTO_INCREMENT, branch TEXT, product TEXT, quantity INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO sales (branch, product, quantity) VALUES ('NY', 'Laptop', 10), ('NY', 'Phone', 15), ('CA', 'Table', 5);",
				"expectedOutput": [
					{
						"branch": "NY",
						"product": "Phone",
						"max_sold": 15
					},
					{
						"branch": "CA",
						"product": "Table",
						"max_sold": 5
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO sales (branch, product, quantity) VALUES ('TX', 'Shoes', 8), ('TX', 'Shirt', 12);",
				"expectedOutput": [
					{
						"branch": "TX",
						"product": "Shirt",
						"max_sold": 12
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO sales (branch, product, quantity) VALUES ('FL', 'Bag', 6), ('FL', 'Shoes', 6), ('FL', 'Watch', 5);",
				"expectedOutput": [
					{
						"branch": "FL",
						"product": "Bag",
						"max_sold": 6
					},
					{
						"branch": "FL",
						"product": "Shoes",
						"max_sold": 6
					}
				]
			}
		],
		"marks": 10
	},
	{
		"id": 76,
		"title": "Birthday Bunch ",
		"description": "Write a query to count the number of students born in each month from the `students` table.",
		"schema": "CREATE TABLE students (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, birthdate DATE);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO students (name, birthdate) VALUES ('Alice', '2000-01-15'), ('Bob', '2000-01-25'), ('Charlie', '2000-02-10');",
				"expectedOutput": [
					{
						"month": 1,
						"student_count": 2
					},
					{
						"month": 2,
						"student_count": 1
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO students (name, birthdate) VALUES ('David', '2000-03-05'), ('Eve', '2000-03-22'), ('Frank', '2000-04-11');",
				"expectedOutput": [
					{
						"month": 3,
						"student_count": 2
					},
					{
						"month": 4,
						"student_count": 1
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO students (name, birthdate) VALUES ('Grace', '2000-05-20'), ('Helen', '2000-05-21');",
				"expectedOutput": [
					{
						"month": 5,
						"student_count": 2
					}
				]
			}
		],
		"marks": 6
	},
	{
		"id": 77,
		"title": "Hotel Frequent Guests ",
		"description": "Write a query to find guests who have booked more than 2 rooms in total from the `bookings` table.",
		"schema": "CREATE TABLE bookings (id INTEGER PRIMARY KEY AUTO_INCREMENT, guest TEXT, rooms INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO bookings (guest, rooms) VALUES ('Alice', 2), ('Alice', 1), ('Bob', 1);",
				"expectedOutput": [
					{
						"guest": "Alice",
						"total_rooms": 3
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO bookings (guest, rooms) VALUES ('Charlie', 2), ('Charlie', 2), ('David', 1);",
				"expectedOutput": [
					{
						"guest": "Charlie",
						"total_rooms": 4
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO bookings (guest, rooms) VALUES ('Eva', 1), ('Eva', 2), ('Eva', 1);",
				"expectedOutput": [
					{
						"guest": "Eva",
						"total_rooms": 4
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 78,
		"title": "Most Popular Courses ",
		"description": "Write a query to find the course with the maximum number of students enrolled from the `enrollments` table.",
		"schema": "CREATE TABLE enrollments (id INTEGER PRIMARY KEY AUTO_INCREMENT, course TEXT, student TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO enrollments (course, student) VALUES ('Math', 'Alice'), ('Math', 'Bob'), ('Science', 'Charlie');",
				"expectedOutput": [
					{
						"course": "Math",
						"student_count": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO enrollments (course, student) VALUES ('History', 'David'), ('History', 'Eve'), ('History', 'Frank'), ('Geography', 'Grace');",
				"expectedOutput": [
					{
						"course": "History",
						"student_count": 3
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO enrollments (course, student) VALUES ('English', 'Helen'), ('English', 'Ian'), ('English', 'Jack');",
				"expectedOutput": [
					{
						"course": "English",
						"student_count": 3
					}
				]
			}
		],
		"marks": 10
	},
	{
		"id": 79,
		"title": "Find Top 2 Most Expensive Products",
		"description": "Write a query on the `products` table to retrieve the names and prices of the two most expensive products.",
		"marks": 6,
		"schema": "CREATE TABLE products (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, price INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO products (name, price) VALUES ('Laptop', 600), ('Mouse', 100), ('Keyboard', 700);",
				"expectedOutput": [
					{
						"name": "Keyboard",
						"price": 700
					},
					{
						"name": "Laptop",
						"price": 600
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO products (name, price) VALUES ('Monitor', 1200), ('Cable', 50);",
				"expectedOutput": [
					{
						"name": "Monitor",
						"price": 1200
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO products (name, price) VALUES ('Phone', 800), ('Charger', 200);",
				"expectedOutput": [
					{
						"name": "Phone",
						"price": 800
					},
					{
						"name": "Charger",
						"price": 200
					}
				]
			}
		]
	},
	{
		"id": 80,
		"title": "Find Orders with Highest Total",
		"description": "Write a query on the `orders` table to return the order(s) with the maximum total value.",
		"marks": 6,
		"schema": "CREATE TABLE orders (id INTEGER PRIMARY KEY AUTO_INCREMENT, order_id TEXT, total INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO orders (order_id, total) VALUES ('ORD001', 1500), ('ORD002', 800), ('ORD003', 2000);",
				"expectedOutput": [
					{
						"order_id": "ORD003",
						"total": 2000
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO orders (order_id, total) VALUES ('ORD004', 500), ('ORD005', 2500);",
				"expectedOutput": [
					{
						"order_id": "ORD005",
						"total": 2500
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO orders (order_id, total) VALUES ('ORD006', 3000), ('ORD007', 400);",
				"expectedOutput": [
					{
						"order_id": "ORD006",
						"total": 3000
					}
				]
			}
		]
	},
	{
		"id": 81,
		"title": "Find the Most Recent Books",
		"description": "Write a query on the `library` table to fetch the books with the most recent year of publication.",
		"marks": 8,
		"schema": "CREATE TABLE library (id INTEGER PRIMARY KEY AUTO_INCREMENT, title TEXT, year INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO library (title, year) VALUES ('AI Basics', 2009), ('ML Guide', 2015), ('Deep Learning', 2020);",
				"expectedOutput": [
					{
						"title": "Deep Learning",
						"year": 2020
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO library (title, year) VALUES ('Networking', 2005), ('Cloud Computing', 2018);",
				"expectedOutput": [
					{
						"title": "Cloud Computing",
						"year": 2018
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO library (title, year) VALUES ('Cyber Security', 2022);",
				"expectedOutput": [
					{
						"title": "Cyber Security",
						"year": 2022
					}
				]
			}
		]
	},
	{
		"id": 82,
		"title": "Find Department with Maximum Employees",
		"description": "Write a query on the `employees` table to find the department that has the maximum number of employees.",
		"marks": 7,
		"schema": "CREATE TABLE employees (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, department TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employees (name, department) VALUES ('Alice', 'HR'), ('Bob', 'IT'), ('Charlie', 'IT');",
				"expectedOutput": [
					{
						"department": "IT",
						"count": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employees (name, department) VALUES ('David', 'Finance'), ('Emma', 'Finance'), ('Frank', 'Finance');",
				"expectedOutput": [
					{
						"department": "Finance",
						"count": 3
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employees (name, department) VALUES ('George', 'Sales'), ('Helen', 'Sales'), ('Ian', 'IT');",
				"expectedOutput": [
					{
						"department": "Sales",
						"count": 2
					}
				]
			}
		]
	},
	{
		"id": 83,
		"title": "Find Category with Maximum Products",
		"description": "Write a query on the `products` table to return the category that has the maximum number of products.",
		"marks": 7,
		"schema": "CREATE TABLE products (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, category TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO products (name, category) VALUES ('Laptop', 'Electronics'), ('Phone', 'Electronics'), ('Table', 'Furniture');",
				"expectedOutput": [
					{
						"category": "Electronics",
						"count": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO products (name, category) VALUES ('Chair', 'Furniture'), ('Sofa', 'Furniture'), ('Fan', 'Electronics');",
				"expectedOutput": [
					{
						"category": "Furniture",
						"count": 2
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO products (name, category) VALUES ('Shirt', 'Clothing'), ('Jeans', 'Clothing'), ('Watch', 'Accessories');",
				"expectedOutput": [
					{
						"category": "Clothing",
						"count": 2
					}
				]
			}
		]
	},
	{
		"id": 84,
		"title": "Find Highest Scoring Student(s)",
		"description": "Write a query on the `scores` table to return the student(s) who have the maximum score.",
		"marks": 6,
		"schema": "CREATE TABLE scores (id INTEGER PRIMARY KEY AUTO_INCREMENT, student TEXT, score INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO scores (student, score) VALUES ('Alice', 95), ('Bob', 85), ('Charlie', 92);",
				"expectedOutput": [
					{
						"student": "Alice",
						"score": 95
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO scores (student, score) VALUES ('David', 99), ('Emma', 45), ('Frank', 91);",
				"expectedOutput": [
					{
						"student": "David",
						"score": 99
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO scores (student, score) VALUES ('George', 100), ('Helen', 89), ('Ian', 97);",
				"expectedOutput": [
					{
						"student": "George",
						"score": 100
					}
				]
			}
		]
	},
	{
		"id": 85,
		"title": "Find Customers with Minimum Orders",
		"description": "Write a query on the `customers` and `orders` tables to find customers who have placed the least number of orders.",
		"marks": 5,
		"schema": "CREATE TABLE customers (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT); CREATE TABLE orders (id INTEGER PRIMARY KEY AUTO_INCREMENT, customer_id INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO customers (name) VALUES ('Alice'), ('Bob'), ('Charlie'); INSERT INTO orders (customer_id) VALUES (1);",
				"expectedOutput": [
					{
						"name": "Bob"
					},
					{
						"name": "Charlie"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO customers (name) VALUES ('David'), ('Emma'); INSERT INTO orders (customer_id) VALUES (2);",
				"expectedOutput": [
					{
						"name": "David"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO customers (name) VALUES ('Frank'), ('Grace'); -- no orders inserted",
				"expectedOutput": [
					{
						"name": "Frank"
					},
					{
						"name": "Grace"
					}
				]
			}
		]
	},
	{
		"id": 86,
		"title": "Find Cheapest Products",
		"description": "Write a query on the `products` table to return the products with the minimum price.",
		"marks": 5,
		"schema": "CREATE TABLE products (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, price INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO products (name, price) VALUES ('Pen', 10), ('Notebook', 40), ('Bag', 80);",
				"expectedOutput": [
					{
						"name": "Pen"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO products (name, price) VALUES ('Eraser', 5), ('Marker', 55);",
				"expectedOutput": [
					{
						"name": "Eraser"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO products (name, price) VALUES ('Pencil', 15), ('Scale', 25), ('Box', 100);",
				"expectedOutput": [
					{
						"name": "Pencil"
					}
				]
			}
		]
	},
	{
		"id": 87,
		"title": "Find Employee with Maximum Salary",
		"description": "Write a query on the `employees` table to return the employee(s) earning the maximum salary.",
		"marks": 6,
		"schema": "CREATE TABLE employees (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, salary INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO employees (name, salary) VALUES ('Alice', 60000), ('Bob', 40000), ('Charlie', 70000);",
				"expectedOutput": [
					{
						"name": "Charlie"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO employees (name, salary) VALUES ('David', 50001), ('Emma', 30000);",
				"expectedOutput": [
					{
						"name": "David"
					}
				]
			},
			{
				"id": 3,
				"sampleData": "INSERT INTO employees (name, salary) VALUES ('Frank', 80000), ('George', 90000);",
				"expectedOutput": [
					{
						"name": "George"
					}
				]
			}
		]
	},
	{
		"id": 88,
		"title": "Customer Age Group Analysis",
		"description": "Write a query on the `customers` table to categorize customers by age groups and calculate average spending per group. Age groups: '18-25', '26-35', '36-45', '46-55', '55+'. Calculate age from birth_date to '2024-01-01'. Return age_group, customer_count, and avg_spending (rounded to 2 decimal places).",
		"marks": 10,
		"schema": "CREATE TABLE customers (id INTEGER PRIMARY KEY AUTO_INCREMENT, customer_name TEXT, birth_date DATE, total_spending DECIMAL(10,2));",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO customers (customer_name, birth_date, total_spending) VALUES ('Alice','1995-06-15',2500.00),('Bob','1988-03-22',3200.00),('Carol','1975-11-08',4100.00),('Dave','1992-09-12',1800.00),('Eve','1965-04-30',5200.00);",
				"expectedOutput": [
					{
						"age_group": "55+",
						"customer_count": 1,
						"avg_spending": 5200
					},
					{
						"age_group": "36-45",
						"customer_count": 1,
						"avg_spending": 4100
					},
					{
						"age_group": "26-35",
						"customer_count": 2,
						"avg_spending": 2500
					},
					{
						"age_group": "18-25",
						"customer_count": 1,
						"avg_spending": 2500
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO customers (customer_name, birth_date, total_spending) VALUES ('Frank','1980-07-14',3800.00),('Grace','1998-12-03',1500.00),('Henry','1972-01-25',4500.00),('Ivy','1985-05-18',2900.00);",
				"expectedOutput": [
					{
						"age_group": "46-55",
						"customer_count": 1,
						"avg_spending": 4500
					},
					{
						"age_group": "36-45",
						"customer_count": 1,
						"avg_spending": 3800
					},
					{
						"age_group": "26-35",
						"customer_count": 1,
						"avg_spending": 2900
					},
					{
						"age_group": "18-25",
						"customer_count": 1,
						"avg_spending": 1500
					}
				]
			}
		]
	},
	{
		"id": 89,
		"title": "Inventory Turnover Rate",
		"description": "Write a query on the `inventory_data` table to calculate the inventory turnover rate (units_sold / average_inventory) for each product. Return product_name, units_sold, average_inventory, turnover_rate (rounded to 2 decimal places), and turnover_category ('High' if rate > 5, 'Medium' if 2-5, 'Low' if < 2).",
		"marks": 8,
		"schema": "CREATE TABLE inventory_data (id INTEGER PRIMARY KEY AUTO_INCREMENT, product_name TEXT, month TEXT, units_sold INTEGER, ending_inventory INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO inventory_data (product_name, month, units_sold, ending_inventory) VALUES ('Widget','Jan',100,20),('Widget','Feb',120,25),('Widget','Mar',110,30),('Gadget','Jan',200,80),('Gadget','Feb',180,70),('Gadget','Mar',220,90);",
				"expectedOutput": [
					{
						"product_name": "Gadget",
						"units_sold": 600,
						"average_inventory": 80,
						"turnover_rate": 7.5,
						"turnover_category": "High"
					},
					{
						"product_name": "Widget",
						"units_sold": 330,
						"average_inventory": 25,
						"turnover_rate": 13.2,
						"turnover_category": "High"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO inventory_data (product_name, month, units_sold, ending_inventory) VALUES ('Tool','Jan',50,40),('Tool','Feb',45,35),('Tool','Mar',55,45),('Device','Jan',30,50),('Device','Feb',25,45),('Device','Mar',35,55);",
				"expectedOutput": [
					{
						"product_name": "Tool",
						"units_sold": 150,
						"average_inventory": 40,
						"turnover_rate": 3.75,
						"turnover_category": "Medium"
					},
					{
						"product_name": "Device",
						"units_sold": 90,
						"average_inventory": 50,
						"turnover_rate": 1.8,
						"turnover_category": "Low"
					}
				]
			}
		]
	},
	{
		"id": 90,
		"title": "Student Attendance Pattern Analysis",
		"description": "Write a query on the `student_attendance` table to analyze attendance patterns. Calculate the attendance percentage for each student and categorize them as 'Excellent' (>=95%), 'Good' (85-94%), 'Fair' (75-84%), or 'Poor' (<75%). Return student_name, total_days, present_days, attendance_percentage (rounded to 2), and attendance_category.",
		"marks": 8,
		"schema": "CREATE TABLE student_attendance (id INTEGER PRIMARY KEY AUTO_INCREMENT, student_name TEXT, date DATE, status TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO student_attendance (student_name, date, status) VALUES ('Alice','2024-01-01','Present'),('Alice','2024-01-02','Present'),('Alice','2024-01-03','Absent'),('Alice','2024-01-04','Present'),('Alice','2024-01-05','Present'),('Bob','2024-01-01','Present'),('Bob','2024-01-02','Absent'),('Bob','2024-01-03','Absent'),('Bob','2024-01-04','Present'),('Bob','2024-01-05','Present');",
				"expectedOutput": [
					{
						"student_name": "Alice",
						"total_days": 5,
						"present_days": 4,
						"attendance_percentage": 80,
						"attendance_category": "Fair"
					},
					{
						"student_name": "Bob",
						"total_days": 5,
						"present_days": 3,
						"attendance_percentage": 60,
						"attendance_category": "Poor"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO student_attendance (student_name, date, status) VALUES ('Carol','2024-01-01','Present'),('Carol','2024-01-02','Present'),('Carol','2024-01-03','Present'),('Carol','2024-01-04','Present'),('Carol','2024-01-05','Present'),('Dave','2024-01-01','Present'),('Dave','2024-01-02','Present'),('Dave','2024-01-03','Present'),('Dave','2024-01-04','Absent'),('Dave','2024-01-05','Present'),('Dave','2024-01-06','Present');",
				"expectedOutput": [
					{
						"student_name": "Carol",
						"total_days": 5,
						"present_days": 5,
						"attendance_percentage": 100,
						"attendance_category": "Excellent"
					},
					{
						"student_name": "Dave",
						"total_days": 6,
						"present_days": 5,
						"attendance_percentage": 83.33,
						"attendance_category": "Fair"
					}
				]
			}
		]
	},
	{
		"id": 91,
		"title": "Top Performing Athletes",
		"description": "Write a query to find all athletes with scores above 75 from the `athletes` table.",
		"schema": "CREATE TABLE athletes (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, score INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO athletes (name, score) VALUES ('Michael', 82), ('Sarah', 89), ('John', 68), ('Emma', 91);",
				"expectedOutput": [
					{
						"name": "Emma",
						"score": 91
					},
					{
						"name": "Michael",
						"score": 82
					},
					{
						"name": "Sarah",
						"score": 89
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO athletes (name, score) VALUES ('David', 78), ('Lisa', 73), ('Tom', 85), ('Anna', 70);",
				"expectedOutput": [
					{
						"name": "David",
						"score": 78
					},
					{
						"name": "Tom",
						"score": 85
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 92,
		"title": "Lowest Inventory Items",
		"description": "Write a query to find the names of products with the three lowest stock quantities, ordered by stock ascending from the `inventory` table.",
		"schema": "CREATE TABLE inventory (id INTEGER PRIMARY KEY AUTO_INCREMENT, product TEXT, stock INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO inventory (product, stock) VALUES ('Laptop', 15), ('Mouse', 8), ('Keyboard', 12), ('Monitor', 3);",
				"expectedOutput": [
					{
						"product": "Monitor",
						"stock": 3
					},
					{
						"product": "Mouse",
						"stock": 8
					},
					{
						"product": "Keyboard",
						"stock": 12
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO inventory (product, stock) VALUES ('Printer', 20), ('Scanner', 6), ('Webcam', 4), ('Headset', 7);",
				"expectedOutput": [
					{
						"product": "Webcam",
						"stock": 4
					},
					{
						"product": "Scanner",
						"stock": 6
					},
					{
						"product": "Headset",
						"stock": 7
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 93,
		"title": "High Value Transactions",
		"description": "Write a query to count how many transactions have an amount greater than 500 from the `transactions` table.",
		"schema": "CREATE TABLE transactions (id INTEGER PRIMARY KEY AUTO_INCREMENT, account TEXT, amount REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO transactions (account, amount) VALUES ('ACC001', 750.25), ('ACC002', 300.00), ('ACC003', 850.00), ('ACC004', 450.00);",
				"expectedOutput": [
					{
						"high_value_transactions": 2
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO transactions (account, amount) VALUES ('ACC005', 900.00), ('ACC006', 400.00), ('ACC007', 625.00);",
				"expectedOutput": [
					{
						"high_value_transactions": 2
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 94,
		"title": "Average Transaction Value by Account",
		"description": "Write a query to calculate the average transaction amount for each account from the `transactions` table, only showing accounts with more than one transaction.",
		"schema": "CREATE TABLE transactions (id INTEGER PRIMARY KEY AUTO_INCREMENT, account TEXT, amount REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO transactions (account, amount) VALUES ('ACC001', 500.50), ('ACC001', 350.00), ('ACC002', 600.00), ('ACC003', 450.00), ('ACC003', 750.00);",
				"expectedOutput": [
					{
						"account": "ACC001",
						"avg_amount": 425.25
					},
					{
						"account": "ACC003",
						"avg_amount": 600.0
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO transactions (account, amount) VALUES ('ACC004', 850.00), ('ACC005', 380.00), ('ACC005', 420.00), ('ACC005', 500.00);",
				"expectedOutput": [
					{
						"account": "ACC005",
						"avg_amount": 433.33
					}
				]
			}
		],
		"marks": 8
	},
	{
		"id": 95,
		"title": "Team Performance Tiers",
		"description": "Write a query to classify teams into performance tiers based on their average player ratings: 'Excellent' (>90), 'Good' (75-90), and 'Average' (<75) from the `players` table.",
		"schema": "CREATE TABLE players (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, team TEXT, rating INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO players (name, team, rating) VALUES ('Alex', 'Tigers', 85), ('Ben', 'Lions', 92), ('Chris', 'Tigers', 78), ('Dan', 'Lions', 88), ('Eva', 'Lions', 95), ('Frank', 'Eagles', 65);",
				"expectedOutput": [
					{
						"team": "Eagles",
						"performance_tier": "Average"
					},
					{
						"team": "Lions",
						"performance_tier": "Excellent"
					},
					{
						"team": "Tigers",
						"performance_tier": "Good"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO players (name, team, rating) VALUES ('Grace', 'Wolves', 89), ('Henry', 'Wolves', 91), ('Ivy', 'Hawks', 87), ('Jack', 'Hawks', 93), ('Kate', 'Hawks', 85);",
				"expectedOutput": [
					{
						"team": "Hawks",
						"performance_tier": "Good"
					},
					{
						"team": "Wolves",
						"performance_tier": "Good"
					}
				]
			}
		],
		"marks": 10
	},
	{
		"id": 96,
		"title": "Score Distribution",
		"description": "Write a query to show the number of athletes in each score range: 'Elite' (90-100), 'Advanced' (80-89), 'Intermediate' (70-79), 'Beginner' (60-69), 'Novice' (<60) from the `athletes` table.",
		"schema": "CREATE TABLE athletes (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, score INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO athletes (name, score) VALUES ('Alice', 83), ('Bob', 94), ('Charlie', 76), ('David', 52);",
				"expectedOutput": [
					{
						"score_range": "Advanced",
						"count": 1
					},
					{
						"score_range": "Elite",
						"count": 1
					},
					{
						"score_range": "Intermediate",
						"count": 1
					},
					{
						"score_range": "Novice",
						"count": 1
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO athletes (name, score) VALUES ('Eva', 96), ('Frank', 92), ('Grace', 84), ('Henry', 67);",
				"expectedOutput": [
					{
						"score_range": "Elite",
						"count": 2
					},
					{
						"score_range": "Advanced",
						"count": 1
					},
					{
						"score_range": "Beginner",
						"count": 1
					}
				]
			}
		],
		"marks": 10
	},
	{
		"id": 97,
		"title": "VIP Customer Analysis",
		"description": "Write a query to identify customers whose average purchase amount is at least 60% higher than the overall average purchase amount from the `purchases` table.",
		"schema": "CREATE TABLE purchases (id INTEGER PRIMARY KEY AUTO_INCREMENT, customer TEXT, amount REAL);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO purchases (customer, amount) VALUES ('Alice', 1800.50), ('Alice', 900.00), ('Bob', 200.00), ('Charlie', 250.00);",
				"expectedOutput": [
					{
						"customer": "Alice",
						"avg_purchase_value": 1350.25
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO purchases (customer, amount) VALUES ('David', 1200.00), ('Eve', 300.00), ('Eve', 280.00), ('Frank', 1100.00);",
				"expectedOutput": [
					{
						"customer": "David",
						"avg_purchase_value": 1200.0
					}
				]
			}
		],
		"marks": 10
	},
	{
		"id": 98,
		"title": "Team Skill Diversity",
		"description": "Write a query to find teams that have players with at least 3 different skill levels, ordered by skill range (max - min) from the `players` table.",
		"schema": "CREATE TABLE players (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, team TEXT, skill_level INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO players (name, team, skill_level) VALUES ('Alice', 'Rockets', 75), ('Bob', 'Rockets', 82), ('Charlie', 'Rockets', 90), ('Dave', 'Sharks', 85), ('Eva', 'Sharks', 85);",
				"expectedOutput": [
					{
						"team": "Rockets",
						"skill_range": 15,
						"unique_skill_levels": 3
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO players (name, team, skill_level) VALUES ('Alice', 'Phoenix', 70), ('Bob', 'Phoenix', 88), ('Charlie', 'Phoenix', 95), ('Dave', 'Phoenix', 81), ('Eva', 'Storm', 77);",
				"expectedOutput": [
					{
						"team": "Phoenix",
						"skill_range": 25,
						"unique_skill_levels": 4
					}
				]
			}
		],
		"marks": 10
	},
	{
		"id": 99,
		"title": "Update Customer Purchase Status",
		"description": "Write an UPDATE query to set the status to 'VIP' for customers who have made more than 3 purchases in the `customers` table.",
		"schema": "CREATE TABLE customers (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, purchase_count INTEGER, status TEXT);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO customers (name, purchase_count, status) VALUES ('Alice', 5, 'Regular'), ('Bob', 2, 'Regular'), ('Charlie', 4, 'Regular'), ('Diana', 1, 'Regular');",
				"expectedOutput": [
					{
						"name": "Alice",
						"purchase_count": 5,
						"status": "VIP"
					},
					{
						"name": "Bob",
						"purchase_count": 2,
						"status": "Regular"
					},
					{
						"name": "Charlie",
						"purchase_count": 4,
						"status": "VIP"
					},
					{
						"name": "Diana",
						"purchase_count": 1,
						"status": "Regular"
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO customers (name, purchase_count, status) VALUES ('Eva', 6, 'Regular'), ('Frank', 3, 'Regular'), ('Grace', 7, 'Regular');",
				"expectedOutput": [
					{
						"name": "Eva",
						"purchase_count": 6,
						"status": "VIP"
					},
					{
						"name": "Frank",
						"purchase_count": 3,
						"status": "Regular"
					},
					{
						"name": "Grace",
						"purchase_count": 7,
						"status": "VIP"
					}
				]
			}
		],
		"marks": 10
	},
	{
		"id": 100,
		"title": "Insert New Product Records",
		"description": "Write an INSERT query to add multiple new products to the `products` table with their category, price, and stock quantity.",
		"schema": "CREATE TABLE products (id INTEGER PRIMARY KEY AUTO_INCREMENT, name TEXT, category TEXT, price REAL, stock INTEGER);",
		"testCases": [
			{
				"id": 1,
				"sampleData": "INSERT INTO products (name, category, price, stock) VALUES ('Laptop', 'Electronics', 999.99, 10);",
				"expectedOutput": [
					{
						"name": "Laptop",
						"category": "Electronics",
						"price": 999.99,
						"stock": 10
					},
					{
						"name": "Wireless Mouse",
						"category": "Electronics",
						"price": 29.99,
						"stock": 50
					},
					{
						"name": "Water Bottle",
						"category": "Accessories",
						"price": 19.99,
						"stock": 100
					}
				]
			},
			{
				"id": 2,
				"sampleData": "INSERT INTO products (name, category, price, stock) VALUES ('Smartphone', 'Electronics', 599.99, 20);",
				"expectedOutput": [
					{
						"name": "Smartphone",
						"category": "Electronics",
						"price": 599.99,
						"stock": 20
					},
					{
						"name": "Wireless Mouse",
						"category": "Electronics",
						"price": 29.99,
						"stock": 50
					},
					{
						"name": "Water Bottle",
						"category": "Accessories",
						"price": 19.99,
						"stock": 100
					}
				]
			}
		],
		"marks": 10
	}
]
